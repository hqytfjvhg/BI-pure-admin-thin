<template>
  <div>
    <Table
      v-model:formData="formData"
      :page="page"
      :showIndex="true"
      :showPage="true"
      :tableData="tableData"
      @refresh="getProductList"
    >
      <template #formItem>
        <el-form-item :label="t('permission.product.name')"
          ><el-input v-model="formData.productName"
        /></el-form-item>
        <el-form-item :label="t('permission.product.type')">
          <el-select
            v-model="formData.type"
            style="width: 150px"
            clearable
            filterable
            @change="handleChangeType"
          >
            <!-- <el-option
              v-for="item in typeOptions"
              :key="item.name"
              :label="item.label"
              :value="item.name"
            /> -->
            <el-option
              :label="t(`salesBoard.saleChartsTwo.series`)"
              value="series"
            />
            <el-option
              :label="t(`permission.product.function`)"
              value="function"
            />
            <el-option
              :label="t(`permission.product.functionally`)"
              value="functionally"
            />
          </el-select>
        </el-form-item>
        <el-form-item>
          <el-select
            v-model="formData.typeId"
            style="width: 150px"
            clearable
            filterable
          >
            <el-option
              v-for="item in attributesOptions"
              :key="item.id"
              :label="locale === 'zh' ? item.name : item.enName"
              :value="item.id"
            />
          </el-select>
        </el-form-item>

        <!-- <el-form-item>
          <el-button type="success" @click="handleAdd">{{
            t("status.add")
          }}</el-button></el-form-item
        > -->
      </template>
      <template #funButton>
        <el-button type="primary" @click="handlePull">{{
          t("status.pull")
        }}</el-button>
      </template>
      <template #columns>
        <el-table-column prop="name" :label="t('permission.product.name')" />
        <el-table-column
          :prop="locale === 'zh' ? 'seriesName' : 'seriesEnName'"
          :label="t('permission.product.series')"
        />
        <el-table-column
          :prop="locale === 'zh' ? 'functionName' : 'functionEnName'"
          :label="t('permission.product.function')"
        />
        <el-table-column
          :prop="locale === 'zh' ? 'functionallyName' : 'functionallyEnName'"
          :label="t('permission.product.functionally')"
        />
        <el-table-column
          :prop="locale === 'zh' ? 'productDate' : 'enProductDate'"
          :label="t('permission.product.date')"
        />
        <el-table-column
          prop="remark"
          :label="t('permission.product.remark')"
        />

        <el-table-column :label="t('status.operate')">
          <template #default="{ row }">
            <el-text type="primary" @click="handleEdit(row)">{{
              t("status.edit")
            }}</el-text>
            <!-- <el-text type="primary" @click="handleDel(row)">{{
              t("status.del")
            }}</el-text> -->
          </template>
        </el-table-column>
      </template>
    </Table>

    <Dialog :dialog="dialog" @confirm="submitEdit">
      <el-form
        ref="ruleForm"
        :model="editFormData"
        :rules="rules"
        :label-position="right"
        style="max-width: 600px"
        label-width="auto"
      >
        <el-form-item :label="t('permission.product.name')" prop="name">
          <el-select
            v-model="editFormData.name"
            :disabled="
              dialog.title === `${t('permission.product.addTitle')}`
                ? false
                : true
            "
          >
            <el-option
              v-for="item in nameOption"
              :key="item"
              :label="item"
              :value="item"
            />
          </el-select>
        </el-form-item>
        <el-form-item :label="t('permission.product.series')" prop="series">
          <el-select v-model="editFormData.series">
            <el-option
              v-for="item in seriesOption"
              :key="item.id"
              :label="locale === 'zh' ? item.name : item.enName"
              :value="item.id"
            />
          </el-select>
        </el-form-item>
        <el-form-item :label="t('permission.product.function')" prop="function">
          <el-select v-model="editFormData.function">
            <el-option
              v-for="item in functionOption"
              :key="item.id"
              :label="locale === 'zh' ? item.name : item.enName"
              :value="item.id"
            />
          </el-select>
        </el-form-item>
        <el-form-item
          :label="t('permission.product.functionally')"
          prop="functionally"
        >
          <el-select v-model="editFormData.functionally">
            <el-option
              v-for="item in functionallyOption"
              :key="item.id"
              :label="locale === 'zh' ? item.name : item.enName"
              :value="item.id"
            />
          </el-select>
        </el-form-item>
        <el-form-item :label="t('permission.product.date')" prop="productDate">
          <el-date-picker
            v-model="editFormData.productDate"
            type="month"
            format="YYYY-MM"
            value-format="YYYY-MM-DD"
          />
        </el-form-item>
        <el-form-item :label="t('permission.product.remark')" prop="remark">
          <el-input v-model="editFormData.remark" />
        </el-form-item>
      </el-form>
    </Dialog>
  </div>
</template>

<script setup>
import { ref, reactive, onMounted, computed } from "vue";
import Table from "@/components/table/index.vue";
import {
  getProductByPage,
  getAllSeries,
  getAllFunction,
  addProduct,
  updateProduct,
  getAllProductFromStreamLine,
  deleteProduct,
  pullAllProductFromStreamLineImportBI,
  getAllFunctionally
} from "@/api/permission/product";
import { useI18n } from "vue-i18n";
import Dialog from "@/components/dialog/index.vue";
import { ElMessage, ElMessageBox } from "element-plus";

const { t, locale } = useI18n();
const formData = ref({ productName: "", type: "", typeId: "" });
const typeOptions = ref([
  { label: t("salesBoard.saleChartsTwo.series"), name: "series" },
  { label: t("salesBoard.saleChartsTwo.function"), name: "function" }
]);
const attributesOptions = ref([]);

const page = reactive({
  page: 1,
  length: 10,
  total: 0
});

//获取表格数据
const tableData = ref([]);
const getProductList = () => {
  if (!formData.value.typeId) {
    delete formData.value.function;
    delete formData.value.series;
    delete formData.value.functionally;
  }
  if (formData.value.type == "series") {
    delete formData.value.function;
    delete formData.value.functionally;
    formData.value.series = formData.value.typeId;
  } else if (formData.value.type == "function") {
    delete formData.value.series;
    delete formData.value.functionally;
    formData.value.function = formData.value.typeId;
  } else {
    delete formData.value.series;
    delete formData.value.function;
    formData.value.functionally = formData.value.typeId;
  }

  if (formData.value) {
    formData.value.page = page.page;
    formData.value.length = page.length;
  }
  getProductByPage(formData.value).then(res => {
    if (res.success) {
      tableData.value = res.data.list;
      page.total = res.data.totalCount;
    }
  });
};

//新增产品
const dialog = reactive({
  show: false,
  title: t("permission.product.addTitle"),
  width: "50%"
});
const editFormData = ref({});
const rules = computed(() => {
  return {
    name: [
      {
        required: true,
        message: t("permission.product.nameReg"),
        trigger: "change"
      }
    ],
    series: [
      {
        required: true,
        message: t("permission.product.seriesReg"),
        trigger: "change"
      }
    ],
    function: [
      {
        required: true,
        message: t("permission.product.functionReg"),
        trigger: "change"
      }
    ],
    functionally: [
      {
        required: true,
        message: t("permission.product.functionallyReg"),
        trigger: "change"
      }
    ],
    productDate: [
      {
        required: true,
        message: t("permission.product.dateReg"),
        trigger: "change"
      }
    ]
  };
});

const handleAdd = () => {
  // getProductName();
  // getProductSeries();
  // getProductFunction();
  if (ruleForm.value) {
    ruleForm.value.resetFields();
  }
  dialog.show = true;
  dialog.title = t("permission.product.addTitle");
  editFormData.value = {};
};

//查询产品名称
const nameOption = ref([]);
const getProductName = () => {
  getAllProductFromStreamLine().then(res => {
    if (res.success) {
      nameOption.value = res.data;
    }
  });
};

//查询产品系列
const seriesOption = ref([]);
const getProductSeries = () => {
  getAllSeries().then(res => {
    if (res.success) {
      seriesOption.value = res.data;
    }
  });
};
//查询产品类型
const functionOption = ref([]);
const getProductFunction = () => {
  getAllFunction().then(res => {
    if (res.success) {
      functionOption.value = res.data;
    }
  });
};

//查询功能类型
const functionallyOption = ref([]);
const getFunctionally = () => {
  getAllFunctionally().then(res => {
    if (res.success) {
      functionallyOption.value = res.data;
    }
  });
};

const handleChangeType = async val => {
  formData.value.typeId = null;
  if (val === "series") {
    attributesOptions.value = seriesOption.value;
  } else if (val === "function") {
    attributesOptions.value = functionOption.value;
  } else if (val === "functionally") {
    attributesOptions.value = functionallyOption.value;
  }
  formData.value.typeId = attributesOptions.value[0]?.id;
};

//新增或修改
const ruleForm = ref(null);
const submitEdit = () => {
  // editFormData.value.series = editFormData.value.serialName;
  // editFormData.value.function = editFormData.value.functionName;
  editFormData.value.productDate = editFormData.value.productDate.split("T")[0];
  if (ruleForm.value) {
    ruleForm.value.validate(valid => {
      if (valid) {
        //新增
        if (dialog.title == t("permission.product.addTitle")) {
          addProduct(editFormData.value).then(res => {
            if (res.success) {
              ElMessage.success(t("status.pureSuccess"));
              dialog.show = false;
              getProductList();
            }
          });
        } else if (dialog.title == t("permission.product.editInfo")) {
          updateProduct(editFormData.value).then(res => {
            if (res.success) {
              ElMessage.success(t("status.pureSuccess"));
              dialog.show = false;
              getProductList();
            }
          });
        }
      }
    });
  }
};

//修改
const rowData = ref([]);
const handleEdit = row => {
  if (ruleForm.value) {
    ruleForm.value.resetFields();
  }
  dialog.show = true;
  dialog.title = t("permission.product.editInfo");
  rowData.value = JSON.parse(JSON.stringify(row));
  rowData.value.productDate = new Date(rowData.value.productDate);
  editFormData.value = JSON.parse(JSON.stringify(rowData.value));
  console.log(editFormData.value, 111);
};

//删除产品
const handleDel = row => {
  ElMessageBox.confirm(t("status.delReg"), t("status.warn"), {
    confirmButtonText: t("status.confirm"),
    cancelButtonText: t("status.cancle"),
    type: "warning"
  }).then(() => {
    deleteProduct(row.id).then(res => {
      if (res.success) {
        ElMessage.success(t("status.pureSuccess"));
        getProductList();
      }
    });
  });
};

//拉取
const handlePull = async () => {
  await pullAllProductFromStreamLineImportBI();
  getProductList();
};

onMounted(() => {
  getProductList();
  getProductName();
  getProductSeries();
  getProductFunction();
  getFunctionally();
});
</script>

<style lang="scss" scoped>
:deep(.el-form--inline .el-form-item) {
  margin-right: 20px !important;
}
</style>
