<template>
  <el-row :gutter="24" justify="space-around" type="flex">
    <re-col
      v-motion
      class="mb-[18px]"
      :value="24"
      :xs="24"
      :initial="{
        opacity: 0,
        y: 100
      }"
      :enter="{
        opacity: 1,
        y: 0,
        transition: {
          delay: 400
        }
      }"
      style="padding-left: 0; padding-right: 0"
    >
      <el-card class="bar-card" shadow="never">
        <div class="flex justify-between">
          <!-- <span class="font-medium text-md">{{
            t("salesBoard.sales")
          }}</span> -->
          <el-form
            :inline="true"
            :model="formData"
            ref="ruleForm"
            :rules="rules"
          >
            <el-form-item :label="t('salesBoard.common.date')" prop="date">
              <el-date-picker
                v-model="formData.date"
                type="date"
                placeholder="Pick a Date"
                format="YYYY/MM/DD"
                value-format="YYYY-MM-DD"
                @change="handleChangeDate"
              />
            </el-form-item>
            <el-form-item
              :label="t('salesBoard.common.customer')"
              prop="customer"
            >
              <el-select
                v-model="formData.customer"
                style="width: 240px"
                filterable
                clearable
              >
                <el-option
                  v-for="item in customerOptions"
                  :key="item"
                  :label="item"
                  :value="item"
                />
              </el-select> </el-form-item
            ><el-form-item
              ><el-button type="primary" @click="getData">{{
                t("status.inquire")
              }}</el-button></el-form-item
            >
          </el-form>
        </div>
        <div class="flex items-start justify-between mt-3">
          <el-row style="width: 100%; height: 600px">
            <el-col :span="8"
              ><div id="salesOne-bar" style="width: 100%; height: 600px"
            /></el-col>
            <el-col :span="8"
              ><div id="salesTwo-bar" style="width: 100%; height: 600px"
            /></el-col>
            <el-col :span="8"
              ><div id="salesThree-bar" style="width: 100%; height: 600px"
            /></el-col>
          </el-row>
          <!-- <div
            id="sales-bar"
            ref="salesBar"
            style="width: 100%; height: 600px"
          /> -->
        </div>
      </el-card>
    </re-col>
    <re-col
      v-motion
      class="mb-[18px]"
      :value="24"
      :xs="24"
      :initial="{
        opacity: 0,
        y: 100
      }"
      :enter="{
        opacity: 1,
        y: 0,
        transition: {
          delay: 400
        }
      }"
      style="padding-left: 0; padding-right: 0; margin-top: 20px"
    >
      <el-card class="bar-card" shadow="never">
        <div class="flex justify-between">
          <span class="font-medium text-md" v-if="formData?.customer">{{
            formData?.customer + t("salesBoard.saleChartsOne.rolling")
          }}</span>
        </div>
        <div class="flex items-start justify-between mt-3">
          <div
            id="rolling-bar"
            ref="rollingBar"
            style="width: 100%; height: 450px"
          />
        </div>
      </el-card>
    </re-col>
  </el-row>
</template>

<script setup>
import ReCol from "@/components/ReCol";
import { reactive, ref, onMounted, nextTick, onUnmounted } from "vue";
import { useI18n } from "vue-i18n";
import * as echarts from "echarts";
import { getRealSaleDataToForecastData } from "@/api/biDataBoard/saleChartsOne";
import { selectDistributor } from "@/api/permission/distributors";
import { storageLocal } from "@pureadmin/utils";

const { t } = useI18n();
//获取经销商
const customerOptions = ref(
  storageLocal().getItem("user-info")?.distributorList
);

const transTime = date => {
  let year = date.getFullYear();
  let month = ("0" + (date.getMonth() + 1)).slice(-2); // 月份是从0开始的，所以需要加1；同时补零
  let day = ("0" + date.getDate()).slice(-2); // 日期补零
  return year + "-" + month + "-" + day;
};
const formData = reactive({
  date: transTime(new Date()),
  customer: customerOptions.value[0]
});
//图表一 销售数据与预期数据
let salesBar = ref(null);
// const titleData = ref([
//   t("salesBoard.saleChartsOne.forecast"),
//   t("salesBoard.saleChartsOne.lastYear"),
//   t("salesBoard.saleChartsOne.samePeriod")
// ]);

const xData = ref([]);
const handleChangeDate = val => {
  xData.value = [
    // [
    //   `1-${new Date(val).getMonth() + 1 + t("salesBoard.saleChartsOne.forecastX")}`,
    //   `1-${new Date(val).getMonth() + 1 + t("salesBoard.saleChartsOne.forecastX")}`
    // ],
    // [
    //   `1-${new Date(val).getMonth() + 1 + t("salesBoard.saleChartsOne.lastYearX")}`,
    //   `1-${new Date(val).getMonth() + 1 + t("salesBoard.saleChartsOne.forecastX")}`
    // ],
    [
      "Forecast",
      `${new Date(val).getFullYear() + t("salesBoard.saleChartsOne.samePeriodX")}`
    ],
    [
      `${new Date(val).getFullYear() - 1 + t("salesBoard.saleChartsOne.samePeriodX")}`,
      `${new Date(val).getFullYear() + t("salesBoard.saleChartsOne.samePeriodX")}`
    ],
    [
      `${new Date(val).getFullYear() - 1 + t("salesBoard.saleChartsOne.samePeriodX")}`,
      `${new Date(val).getFullYear() + t("salesBoard.saleChartsOne.samePeriodX")}`
    ]
  ];
};

const sales = (arr, index, title) => {
  let option = {
    title: {
      text: title,
      left: "center",
      textStyle: {}
    },
    tooltip: {
      trigger: "axis",
      axisPointer: {
        type: "shadow"
      }
    },
    legend: {
      data: xData.value[index]
      // top: "2%",
      // icon: "rect",
      // left: "2%"
    },
    grid: {
      left: "4%",
      right: "4%",
      bottom: "0",
      top: "10%",
      containLabel: true
    },
    xAxis: {
      type: "category",
      data: xData.value[index]
      // axisLabel: {
      //   rotate: 45 // 将标签倾斜45度
      // }
    },
    yAxis: {
      type: "value",
      name: "$",
      nameTextStyle: {
        fontWeight: "600"
      }
    },
    series: [
      {
        data: arr,
        type: "bar"
      }
    ]
  };
  if (index === 0) {
    let myChartOne = echarts.init(document.getElementById("salesOne-bar"));
    myChartOne.clear();
    document
      .getElementById("salesOne-bar")
      .removeAttribute("_echarts_instance_");
    option && myChartOne.setOption(option);
  } else if (index === 1) {
    let myChartTwo = echarts.init(document.getElementById("salesTwo-bar"));
    myChartTwo.clear();
    document
      .getElementById("salesTwo-bar")
      .removeAttribute("_echarts_instance_");
    option && myChartTwo.setOption(option);
  } else if (index === 2) {
    let myChartThree = echarts.init(document.getElementById("salesThree-bar"));
    myChartThree.clear();
    document
      .getElementById("salesThree-bar")
      .removeAttribute("_echarts_instance_");

    option && myChartThree.setOption(option);
  }
};

//滚动12个月
let rollingBar = ref(null);
const rolling = arr => {
  let xData = [];
  let yData = [];
  arr.forEach(op => {
    yData.push(op.total);
    xData.push(op.dateString);
  });
  let myChart = echarts.init(document.getElementById("rolling-bar"));
  myChart.clear();
  document.getElementById("rolling-bar").removeAttribute("_echarts_instance_");
  myChart.setOption({
    title: {
      text: t("salesBoard.saleChartsOne.rolling"),
      left: "center",
      textStyle: {}
    },
    tooltip: {
      trigger: "axis",
      axisPointer: {
        type: "shadow"
      }
    },
    // legend: {
    //   top: '2%',
    //   icon: 'rect',
    //   left: '2%'
    // },
    grid: {
      left: "4%",
      right: "4%",
      bottom: "0",
      top: "10%",
      containLabel: true
    },
    xAxis: {
      type: "category",
      data: xData
      // axisLabel: {
      //   rotate: 45 // 将标签倾斜45度
      // }
    },
    yAxis: {
      type: "value",
      name: "$",
      nameTextStyle: {
        fontWeight: "600"
      }
    },
    series: [
      {
        data: yData,
        type: "line",
        lineWidth: 20
      }
    ]
  });
};

// const getDistributor = () => {
//   selectDistributor().then(res => {
//     customerOptions.value = res.data;
//   });
// };

const rules = {
  date: [
    {
      required: true,
      message: t("salesBoard.saleChartsTwo.dateReg"),
      trigger: "change"
    }
  ],
  customer: [
    {
      required: true,
      message: t("salesBoard.saleChartsTwo.customerReg"),
      trigger: "change"
    }
  ]
};

//获取数据
const ruleForm = ref(null);
const getData = () => {
  if (ruleForm.value) {
    ruleForm.value.validate(valid => {
      if (valid) {
        getRealSaleDataToForecastData(formData).then(res => {
          if (res.data) {
            let salesOne = [
              res.data.forecastSaleData,
              res.data.currentYearRealSaleData
            ];
            let salesTwo = [
              res.data.lastYearRealSaleData,
              res.data.currentYearRealSaleData
            ];
            let salesThree = [
              res.data.lastYearCurrentMonthSaleData,
              res.data.currentYearCurrentMonthSaleData
            ];
            let rollingData = res.data.rollMonthContentList;
            nextTick(() => {
              rolling(rollingData);
              sales(salesOne, 0, t("salesBoard.saleChartsOne.forecast"));
              sales(salesTwo, 1, t("salesBoard.saleChartsOne.lastYear"));
              sales(salesThree, 2, t("salesBoard.saleChartsOne.samePeriod"));
            });
          }
        });
      }
    });
  }
};

onMounted(() => {
  // getDistributor();
  // 监听语言切换，重新渲染图表
  handleChangeDate(new Date());
  getData();
  window.addEventListener("setItemEvent", e => {
    getData();
  });
});

onUnmounted(() => {
  // 移除对 sessionStorage 的监听
  window.removeEventListener("setItemEvent", () => {});
});
</script>

<style lang="scss" scoped>
:deep(.el-card) {
  --el-card-border-color: none;

  /* 解决概率进度条宽度 */
  .el-progress--line {
    width: 85%;
  }

  /* 解决概率进度条字体大小 */
  .el-progress-bar__innerText {
    font-size: 15px;
  }

  /* 隐藏 el-scrollbar 滚动条 */
  .el-scrollbar__bar {
    display: none;
  }

  /* el-timeline 每一项上下、左右边距 */
  .el-timeline-item {
    margin: 0 6px;
  }
}

.main-content {
  margin: 20px 20px 0 !important;
  background: none !important;
  padding: 0 !important;
}
</style>
