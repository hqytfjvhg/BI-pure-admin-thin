<script setup lang="js">
import { onMounted, ref, nextTick,onUnmounted } from "vue";
import * as echarts from "echarts";
import { useI18n } from "vue-i18n";
import {
  getTotalSaleMoneyTop10Product,
  getLast12MonthTotalSaleMoneyTop10Product,
  getLastThreeMonthSaleMoney,
  getLastYearAndCurrentYearTotalSaleMoney,
  getLast5YearTotalSaleMoney,
  getAllSaleMoneyTop10DistributorName
} from "@/api/home/index";

defineOptions({
  name: "Welcome"
});
const { t } = useI18n();

const pieTitle = ref([t("home.lastFiveYear"), t("home.lastMonth")]);
const barTitle = ref([t("home.topDistributor"), t("home.topProduct")]);

const pieSetOption = ref({
  title: {
    text: "",
    textStyle: {
      fontSize: 16,
      fontWeight: "normal"
    },
    top: "bottom",
    left: "center"
  },
  tooltip: {
    trigger: "item"
  },
  grid: {
    left: "3%",
    // right: "4%",
    bottom: "12%",
    top: "3%",
    containLabel: true
  },

  series: [
    {
      name: '',
      type: "pie",
      radius: "75%",
      label: {
        position: "inside",
        color: "#fff",
        width: 50
      },
      data: [],
      emphasis: {
        itemStyle: {
          shadowBlur: 10,
          shadowOffsetX: 0,
          shadowColor: "rgba(0, 0, 0, 0.5)"
        }
      }
    }
  ]
});

const barSetOption = ref({
  title: {
    text: "",
    left: "center",
    top: "bottom",
    textStyle: {
      fontSize: 16,
      fontWeight: "normal"
    }
  },
  tooltip: {
    trigger: "axis",
    axisPointer: {
      type: "shadow"
    }
  },
  // legend: {
  //   data: xData.value[index]
  //   // top: "2%",
  //   // icon: "rect",
  //   // left: "2%"
  // },
  // grid: {
  //   left: "4%",
  //   right: "4%",
  //   bottom: "0",
  //   top: "10%",
  //   containLabel: true
  // },
  xAxis: {
    type: "category",
    data: [],
    axisLabel: {
      width: 50,
      interval: 1,
      formatter: function (value) {
        var re = /(.{1,5})(?=(?:\s|$))/g;
        return value.replace(re, "$1\n"); // 每个字符换行，可根据实际需求调整
      }
    }
  },
  yAxis: {
    type: "value"
    // name: "$",
    // nameTextStyle: {
    //   fontWeight: "600"
    // }
  },
  series: [
    {
      data: [],
      type: "bar",
      barWidth: 30
    }
  ]
});

const barThreeSet = ref({
  title: {
    text: t("home.lastThree"),
    left: "center",
    top: "bottom",
    textStyle: {
      fontSize: 16,
      fontWeight: "normal"
    }
  },
  grid: {
      left: "2%",
      bottom: "12%",
      containLabel: true
    },
  tooltip: {
    trigger: "axis",
    axisPointer: {
      type: "shadow"
    }
  },
  xAxis: {
    type: "category",
    data: []
  },
  yAxis: {
    type: "value",
    name: "US$M"
  },
  series: [
    {
      data: [],
      type: "bar",
      barWidth: 30
    }
  ]
});

const toolbox = ref({
  feature: {
    myTool: {
      show: true, //是否显示
      title: t("home.switch"), //鼠标悬空的提示文字
      icon: "path://M853.333333 609.834667L652.501333 810.666667l-60.352-60.330667 55.168-55.146667-494.314666-0.021333v-85.333333H853.333333z m-499.498666-384l60.330666 60.330666L358.997333 341.333333H853.333333v85.333334H153.002667l200.832-200.832z", //这个是阿里icon svg 后 b的全部字符串

      onclick: e => {
        //参数o 是图表的option 我这里并没有用到
      
       e.option.series[0].label.show = !e.option.series[0].label.show //设置show的值对图表进行切换
       if(e.option.series[0].label.show){
        pie.series[0].data = pieTwoData.value.saleMoney;
        let myPieTwo = echarts.init(document.getElementById("pie-two"));
        myPieTwo.setOption(pie);

        bar.xAxis.data = barTwoData.value.xAxisTwo;
        bar.series[0].data = pieTwoData.value.saleMoney;
        let myBarTwo = echarts.init(document.getElementById("bar-two"));
        myBarTwo.setOption(bar);
       
       }else{
        pie.series[0].data = pieTwoData.value.qty;
        let myPieTwo = echarts.init(document.getElementById("pie-two"));
        myPieTwo.setOption(pie);

        bar.xAxis.data = barTwoData.value.xAxisTwo;
        bar.series[0].data = pieTwoData.value.qty;
        let myBarTwo = echarts.init(document.getElementById("bar-two"));
        myBarTwo.setOption(bar);
       }
       
      }
    }
  }
});

//用来创建副本数据
let pie;
let bar;
//绘制图
const painting = () => {
  let myPieOne = echarts.init(document.getElementById("pie-one"));
  pieSetOption.value.title.text = pieTitle.value[0];
  myPieOne.setOption(pieSetOption.value);

  let myPieTwo = echarts.init(document.getElementById("pie-two"));
  pieSetOption.value.title.text = pieTitle.value[1];
  if (myPieTwo) {
    pie = JSON.parse(JSON.stringify(pieSetOption.value));
    pie.toolbox = toolbox.value;
    pie.series[0].data = pieTwoData.value.saleMoney;
  }
  myPieTwo.setOption(pie);

  let myBarOne = echarts.init(document.getElementById("bar-one"));
  barSetOption.value.title.text = barTitle.value[0];
  myBarOne.setOption(barSetOption.value);

  let myBarTwo = echarts.init(document.getElementById("bar-two"));
  barSetOption.value.title.text = barTitle.value[1];
  if (myBarTwo) {
    bar = JSON.parse(JSON.stringify(barSetOption.value));
    bar.xAxis.data = barTwoData.value.xAxisOne;
    bar.series[0].data = barTwoData.value.saleMoney;
  }
  myBarTwo.setOption(bar);

  let myBarThree = echarts.init(document.getElementById("bar-three"));
  myBarThree.setOption(barThreeSet.value);
};

//获取柱状图三的数据
const getBarThree = () => {
  getLastThreeMonthSaleMoney().then(res => {
    res.data.forEach(item => {
      item.value = (item.total / 1000000).toFixed(2);
      item.name = item.dateString;
      barThreeSet.value.xAxis.data.push(item.dateString);
    });
    barThreeSet.value.series[0].data = res.data;
    painting();
  });
};

//获取饼图二的数据
const pieTwoData = ref({});
const getPieTwo = () => {
  getLast12MonthTotalSaleMoneyTop10Product().then(res => {
    res.data.saleMoney.forEach(item => {
      item.value = item.data;
    });
    res.data.qty.forEach(item => {
      item.value = item.data;
    });
    pieTwoData.value = res.data;
    // painting();
  });
};

//获取柱状图二的数据
const barTwoData = ref({});
const getBarTwo = () => {
  getTotalSaleMoneyTop10Product().then(res => {
    barTwoData.value.xAxisOne = [];
    barTwoData.value.xAxisTwo = [];
    res.data.saleMoney.forEach(item => {
      item.value = item.data;
      barTwoData.value.xAxisOne.push(item.name);
    });
    res.data.qty.forEach(item => {
      item.value = item.data;
      barTwoData.value.xAxisTwo.push(item.name);
    });
    barTwoData.value.saleMoney = res.data.saleMoney;
    barTwoData.value.qty = res.data.qty;
    painting();
  });
};

//直接获取三个值的数据
const threeValue = ref({});
const calculating = ref(false);
const getThreeValue = () => {
  getLastYearAndCurrentYearTotalSaleMoney().then(res => {
    if (res.data.currentYearData?.data === -1) {
      calculating.value = true;
    } else {
      threeValue.value = res.data;
    }
  });
};
//获取饼图一的数据
const getPieOne = () => {
  getLast5YearTotalSaleMoney().then(res => {
    res.data.forEach(item => {
      item.value = item.data;
    });
    pieSetOption.value.series[0].data = res.data;
  });
};

//获取柱状图一的数据
const barOneData = ref([]);
const getBarOne = () => {
  getAllSaleMoneyTop10DistributorName().then(res => {
    barOneData.value.xAxis = [];
    res.data.forEach(item => {
      item.value = item.data;
      barOneData.value.xAxis.push(item.name);
    });
    barOneData.value.yAxis = res.data;
    barSetOption.value.xAxis.data = barOneData.value.xAxis;
    barSetOption.value.series[0].data = barOneData.value.yAxis;
  });
};

const getPainting = async () => {
  await getPieOne();
  await getPieTwo();
  await getBarOne();
  await getBarTwo();
  await getBarThree();
  await getThreeValue();
  nextTick(() => {
    painting();
  });

};

const year = new Date().getFullYear() + "-1~" + new Date().getMonth();

onMounted(() => {
  // getBarThree();
  getPainting();
  window.addEventListener("setItemEvent", e => {
    getPainting();
    
  });
});


onUnmounted(() => {
  // 移除对 sessionStorage 的监听
  window.removeEventListener("setItemEvent", () => {});
});
</script>

<template>
  <div>
    <el-row>
      <el-col :span="12">
        <el-row>
          <el-col
            :span="12"
            class="col-style"
          >
            <div>
              <h2>{{ t("home.overview") }}</h2>

              <el-card class="border-box">
                <div v-if="!calculating">
                  <el-tooltip
                    effect="light"
                    placement="top"
                    :content="`${year + $t('home.month') + $t('home.latest')}`"
                  >
                    <div>
                      {{
                        (threeValue.currentYearData?.data / 1000000).toFixed(2)
                      }}
                    </div>
                  </el-tooltip>
                  <el-tooltip
                    effect="light"
                    placement="top"
                    :content="$t('home.year')"
                  >
                    <div>
                      {{ (threeValue.lastYearData?.data / 1000000).toFixed(2) }}
                    </div>
                  </el-tooltip>
                  <el-tooltip
                    effect="light"
                    placement="top"
                    :content="$t('home.value')"
                  >
                    <div>{{ threeValue.Compare }}%</div>
                  </el-tooltip>
                </div>
                <div
                  v-else
                  class="calculat"
                >{{ t("home.calculat") }}</div>
              </el-card>
            </div>
            <div
              id="bar-three"
              style="width: 100%; height: 400px"
            />
          </el-col>
          <el-col :span="12">
            <div
              id="pie-one"
              style="width: 100%; height: 370px"
            />
            <div
              id="pie-two"
              style="width: 100%; height: 400px"
            />
          </el-col>
        </el-row>
      </el-col>
      <el-col :span="12">
        <div
          id="bar-one"
          style="width: 100%; height: 370px"
        />
        <div
          id="bar-two"
          style="width: 100%; height: 400px"
        />
      </el-col>
    </el-row>
  </div>
</template>

<style lang="scss" scoped>
.border-box {
  margin-top: 20px;
  // border: 2px solid black;
  // display: flex;
  // flex-direction: column;
  // justify-content: space-around;
  width: 80%;
  min-width: 230px;
  height: 300px;
  :deep(.el-card__body) {
    height: 100% !important;
    display: flex;
    flex-direction: column;
    justify-content: space-around;
    align-items: center;
  }
  div {
    font-weight: 700;
    font-size: 40px;
  }
  .calculat {
    font-size: 30px;
  }
}
.col-style {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}
</style>
