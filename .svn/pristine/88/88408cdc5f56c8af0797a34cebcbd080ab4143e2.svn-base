<template>
  <div>
    <el-form :inline="true">
      <el-form-item>
        <el-button type="success" @click="handleAddSeries">{{
          t("permission.product.addSeries")
        }}</el-button></el-form-item
      >
      <el-form-item>
        <el-button type="success" @click="handleAddFunction">{{
          t("permission.product.addFunction")
        }}</el-button></el-form-item
      >
      <!-- <el-form-item>
        <el-button type="primary" @click="getAllAttributes">{{
          t("status.ref")
        }}</el-button></el-form-item
      > -->
    </el-form>

    <el-tabs v-model="activeName" class="demo-tabs">
      <!-- <template> -->
      <el-tab-pane
        v-for="(item, index) in allAttribute"
        :key="item"
        :name="attribute[index]?.name"
        :label="t(attribute[index].title)"
      >
        <el-table :data="item" border :height="tableHeight">
          <el-table-column :label="t('status.index')" type="index" width="80" />
          <el-table-column :label="t('permission.product.name')" prop="name" />
          <el-table-column
            :label="t('permission.product.enName')"
            prop="enName"
          />
          <el-table-column
            v-if="activeName == 'series'"
            :label="t('permission.product.brand')"
            prop="brandName"
          />
          <el-table-column
            :label="t('permission.product.remark')"
            prop="remark"
          />
          <el-table-column :label="t('status.operate')">
            <template #default="{ row }">
              <!-- <el-text
                type="primary"
                @click="
                  activeName == 'series'
                    ? handleEdit(row, 'series')
                    : handleEdit(row, 'function')
                "
              >
                {{ t("status.edit") }}</el-text
              > -->
              <el-button
                type="primary"
                link
                @click="
                  activeName == 'series'
                    ? handleEdit(row, 'series')
                    : handleEdit(row, 'function')
                "
                >{{ t("status.edit") }}</el-button
              >
              <el-button
                type="primary"
                link
                @click="
                  activeName == 'series'
                    ? handleDel(row, 'series')
                    : handleDel(row, 'function')
                "
                >{{ t("status.del") }}</el-button
              >
            </template>
          </el-table-column>
        </el-table>
      </el-tab-pane>
      <!-- </template> -->
    </el-tabs>

    <Dialog :dialog="dialog" @confirm="submitAttribute">
      <el-form
        ref="ruleForm"
        :model="editFormData"
        :rules="rules"
        :label-position="right"
        style="max-width: 600px"
        label-width="auto"
      >
        <el-form-item :label="t('permission.product.name')" prop="name">
          <el-input v-model="editFormData.name" />
        </el-form-item>
        <el-form-item :label="t('permission.product.enName')" prop="enName">
          <el-input v-model="editFormData.enName" />
        </el-form-item>
        <el-form-item
          v-if="
            dialog.title == t('permission.product.addSeries') ||
            type == 'series'
          "
          prop="id"
          :label="t('permission.product.brand')"
        >
          <el-select v-model="editFormData.brandId">
            <el-option
              v-for="item in brandOption"
              :key="item.id"
              :label="locale === 'zh' ? item.name : item.enName"
              :value="item.id"
            />
          </el-select>
        </el-form-item>
        <el-form-item :label="t('permission.product.remark')" prop="remark">
          <el-input v-model="editFormData.remark" />
        </el-form-item>
      </el-form>
    </Dialog>
  </div>
</template>

<script setup>
import { ref, reactive, onMounted, computed } from "vue";
import {
  getAllSeries,
  getAllFunction,
  addSeries,
  addFunction,
  updateSeries,
  updateFunction,
  delSeries,
  delFunction
} from "@/api/permission/product";
import { useI18n } from "vue-i18n";
import Dialog from "@/components/dialog/index.vue";
import { ElMessage, ElMessageBox } from "element-plus";
import { getAllBrand } from "@/api/permission/brand";

const { t, locale } = useI18n();
const activeName = ref("series");
const attribute = reactive([
  { title: "permission.product.series", name: "series" },
  { title: "permission.product.function", name: "function" }
]);

//获取系列和功能的表格数据
const allAttribute = ref([]);
const getAllAttributes = async () => {
  allAttribute.value = [];
  await getAllSeries().then(res => {
    if (res.success) {
      allAttribute.value.push(res.data);
    }
  });
  await getAllFunction().then(res => {
    if (res.success) {
      allAttribute.value.push(res.data);
    }
  });
};
const brandOption = ref([]);
const getABrandList = () => {
  getAllBrand().then(res => {
    if (res.data && res.success) {
      brandOption.value = res.data;
    }
  });
};

const dialog = reactive({
  show: false,
  title: "",
  width: "50%"
});

//编辑
const editFormData = ref({});
const type = ref(null);
const handleEdit = (row, attributeType) => {
  if (ruleForm.value) {
    ruleForm.value.resetFields();
  }
  dialog.show = true;
  dialog.title = t("permission.product.editInfo");
  // editFormData.value = row;
  editFormData.value = JSON.parse(JSON.stringify(row));
  type.value = attributeType;
};

//新增系列
const handleAddSeries = () => {
  if (ruleForm.value) {
    ruleForm.value.resetFields();
  }
  dialog.show = true;
  dialog.title = t("permission.product.addSeries");
  editFormData.value = {};
  type.value = null;
};

//新增功能
const handleAddFunction = () => {
  if (ruleForm.value) {
    ruleForm.value.resetFields();
  }
  dialog.show = true;
  dialog.title = t("permission.product.addFunction");
  editFormData.value = {};
  type.value = null;
};

const rules = computed(() => {
  return {
    name: [
      {
        required: true,
        message: t("permission.product.inputNameReg"),
        trigger: "blur"
      }
    ],
    enName: [
      {
        required: true,
        message: t("permission.product.inputEnNameReg"),
        trigger: "blur"
      }
    ],
    brandId: [
      {
        required: true,
        message: t("permission.product.brandReg"),
        trigger: "blur"
      }
    ]
  };
});
//新增或修改确定按钮
const ruleForm = ref(null);
const submitAttribute = async () => {
  if (ruleForm.value) {
    await new Promise((resolve, reject) => {
      ruleForm.value.validate(valid => {
        if (valid) {
          //新增
          if (dialog.title == t("permission.product.addSeries")) {
            editFormData.value.brandId = editFormData.value.id;
            addSeries(editFormData.value)
              .then(res => {
                if (res.success) {
                  ElMessage.success(t("status.pureSuccess"));
                  dialog.show = false;
                  getAllAttributes();
                }
              })
              .finally(resolve);
          } else if (dialog.title == t("permission.product.addFunction")) {
            addFunction(editFormData.value)
              .then(res => {
                if (res.success) {
                  ElMessage.success(t("status.pureSuccess"));
                  dialog.show = false;
                  getAllAttributes();
                }
              })
              .finally(resolve);
          }
          //修改
          if (type.value == "series") {
            updateSeries(editFormData.value).then(res => {
              if (res.success) {
                ElMessage.success(t("status.pureSuccess"));
                dialog.show = false;
                getAllAttributes();
              }
            });
            // .finally(resolve);
          } else if (type.value == "function") {
            updateFunction(editFormData.value).then(res => {
              if (res.success) {
                ElMessage.success(t("status.pureSuccess"));
                dialog.show = false;
                getAllAttributes();
              }
            });
            // .finally(resolve);
          }
        } else {
          resolve();
        }
      });
    });
    // getAllAttributes();
  }
};

//删除
const handleDel = (row, attributeType) => {
  type.value = attributeType;
  ElMessageBox.confirm(t("status.delReg"), t("status.warn"), {
    confirmButtonText: t("status.confirm"),
    cancelButtonText: t("status.cancle"),
    type: "warning"
  }).then(() => {
    if (attributeType === "series") {
      delSeries([row.id]).then(res => {
        if (res.success && res.data) {
          ElMessage.success(t("status.pureSuccess"));
          getAllAttributes();
        }
      });
    } else if (attributeType === "function") {
      delFunction([row.id]).then(res => {
        if (res.success && res.data) {
          ElMessage.success(t("status.pureSuccess"));
          getAllAttributes();
        }
      });
    }
  });
};

const tableHeight = computed(() => {
  return `${window.innerHeight - 250}px`;
});

onMounted(() => {
  getAllAttributes();
  getABrandList();
});
</script>

<style lang="scss" scoped></style>
