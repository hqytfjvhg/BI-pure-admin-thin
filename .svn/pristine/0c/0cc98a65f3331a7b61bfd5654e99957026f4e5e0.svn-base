<template>
  <el-row :gutter="24" justify="space-around" type="flex">
    <re-col
      v-motion
      class="mb-[18px]"
      :value="24"
      :xs="24"
      :initial="{
        opacity: 0,
        y: 100
      }"
      :enter="{
        opacity: 1,
        y: 0,
        transition: {
          delay: 400
        }
      }"
      style="padding-left: 0; padding-right: 0"
    >
      <el-card class="bar-card" shadow="never">
        <div class="flex justify-between">
          <!-- <span class="font-medium text-md">{{
            t("salesBoard.sales")
          }}</span> -->
          <el-form
            :inline="true"
            :model="formData"
            :rules="rules"
            ref="rulesForm"
          >
            <el-form-item :label="t('salesBoard.common.date')" prop="date">
              <el-date-picker
                type="month"
                v-model="dateString"
                format="YYYY-MM"
                value-format="YYYY-MM-DD"
                :disabled="true"
                style="width: 100px"
              />--
              <el-date-picker
                v-model="formData.date"
                type="month"
                placeholder="Pick a Date"
                format="YYYY-MM"
                style="width: 120px"
                value-format="YYYY-MM-DD"
              />
            </el-form-item>
            <el-form-item
              :label="t('salesBoard.common.customer')"
              prop="customer"
            >
              <!-- <el-select
                v-model="formData.customer"
                style="width: 240px"
                filterable
                clearable
                collapse-tags
              >
                <el-option
                  v-for="item in customerOptions"
                  :key="item"
                  :label="item"
                  :value="item"
                />
              </el-select> -->
              <el-cascader
                v-model="formData.customer"
                :show-all-levels="false"
                :options="customerOptions"
                :filter-method="filterMethod"
                filterable
                clearable
                :props="{ children: 'options', label: 'label', value: 'value' }"
              /> </el-form-item
            ><el-form-item
              ><el-button type="primary" @click="getDataSaleOne">{{
                t("status.inquire")
              }}</el-button></el-form-item
            >
          </el-form>
        </div>
        <div class="flex items-start justify-between mt-3">
          <el-row style="width: 100%; height: 600px">
            <el-col :span="12"
              ><div id="salesTop" style="width: 100%; height: 600px"
            /></el-col>
            <el-col :span="12"
              ><div id="qtyTop" style="width: 100%; height: 600px"
            /></el-col>
          </el-row>
        </div>
      </el-card>
    </re-col>
    <re-col
      v-motion
      class="mb-[18px]"
      :value="24"
      :xs="24"
      :initial="{
        opacity: 0,
        y: 100
      }"
      :enter="{
        opacity: 1,
        y: 0,
        transition: {
          delay: 400
        }
      }"
      style="padding-left: 0; padding-right: 0; margin-top: 20px"
    >
      <el-card class="bar-card" shadow="never">
        <div class="flex justify-between">
          <el-form
            :inline="true"
            :model="formDataByType"
            :rules="rulesType"
            ref="rulesTypeForm"
          >
            <el-form-item :label="t('salesBoard.common.date')" prop="date">
              <el-date-picker
                type="month"
                v-model="dateString"
                format="YYYY-MM"
                value-format="YYYY-MM-DD"
                :disabled="true"
                style="width: 100px"
              />--
              <el-date-picker
                v-model="formDataByType.date"
                type="month"
                placeholder="Pick a Date"
                format="YYYY-MM"
                style="width: 120px"
                value-format="YYYY-MM-DD"
              />
            </el-form-item>
            <el-form-item :label="t('salesBoard.common.type')" prop="type">
              <el-select
                v-model="formDataByType.type"
                style="width: 140px"
                filterable
                clearable
                @change="handleChangeType"
              >
                <!-- <el-option
                  v-for="item in typeOptions"
                  :key="item.name"
                  :label="item.label"
                  :value="item.name"
                /> -->
                <el-option
                  :label="t(`salesBoard.saleChartsTwo.series`)"
                  value="series"
                />
                <el-option
                  :label="t(`salesBoard.saleChartsTwo.function`)"
                  value="function"
                />
                <el-option
                  :label="t(`salesBoard.saleChartsTwo.functionally`)"
                  value="functionally"
                />
              </el-select>
            </el-form-item>
            <el-form-item prop="typeId">
              <el-select
                v-model="formDataByType.typeId"
                style="width: 140px"
                filterable
                clearable
              >
                <el-option
                  v-for="item in attributesOptions"
                  :key="item.id"
                  :label="locale === 'zh' ? item.name : item.enName"
                  :value="item.id"
                />
              </el-select>
            </el-form-item>

            <el-form-item
              ><el-button type="primary" @click="getDataSaleTwo">{{
                t("status.inquire")
              }}</el-button></el-form-item
            >
          </el-form>
        </div>
        <div class="flex items-start justify-between mt-3">
          <div
            id="salesThree"
            ref="salesThree"
            style="width: 100%; height: 450px"
          />
        </div>
      </el-card>
    </re-col>
    <re-col
      v-motion
      class="mb-[18px]"
      :value="24"
      :xs="24"
      :initial="{
        opacity: 0,
        y: 100
      }"
      :enter="{
        opacity: 1,
        y: 0,
        transition: {
          delay: 400
        }
      }"
      style="padding-left: 0; padding-right: 0; margin-top: 20px"
    >
      <el-card class="bar-card" shadow="never">
        <div class="flex justify-between">
          <span class="font-medium text-md">{{
            t("salesBoard.saleChartsTwo.salesFour")
          }}</span>
        </div>
        <div class="flex items-start justify-between mt-3">
          <div
            id="salesFour"
            ref="salesFour"
            style="width: 100%; height: 450px"
          />
        </div>
      </el-card>
    </re-col>
  </el-row>
</template>

<script setup>
import ReCol from "@/components/ReCol";
import {
  ref,
  computed,
  watch,
  nextTick,
  onMounted,
  onUnmounted,
  reactive
} from "vue";
import * as echarts from "echarts";
import { useI18n } from "vue-i18n";
import {
  getTopNumberProductSaleInfoByCondition,
  getTopNumberProductTypeSaleInfoByCondition
} from "@/api/biDataBoard/saleChartsTwo";
import {
  getAllSeries,
  getAllFunction,
  getAllFunctionally
} from "@/api/permission/product";
import { storageLocal } from "@pureadmin/utils";
import { distributorList } from "@/utils/distributor";

const { t, locale } = useI18n();
const rate = ["US$m", "USD", "CNY"];
const cnyRate = storageLocal().getItem("user-info")?.cnyRate;

const customerOptions = distributorList();
//模糊查询经销商
const filterMethod = (node, key) => {
  const lowerCaseQuery = key.toLowerCase();
  const lowerCaseLabel = node.label.toLowerCase();
  return lowerCaseLabel.includes(lowerCaseQuery);
};

const typeOptions = ref([
  { label: t("salesBoard.saleChartsTwo.series"), name: "series" },
  { label: t("salesBoard.saleChartsTwo.function"), name: "function" }
]);

const transTime = date => {
  let year = date.getFullYear();
  let month = ("0" + (date.getMonth() + 1)).slice(-2); // 月份是从0开始的，所以需要加1；同时补零
  let day = ("0" + date.getDate()).slice(-2); // 日期补零
  return year + "-" + month + "-" + day;
};

const formData = reactive({
  date: transTime(new Date()),
  customer: customerOptions[0]?.options[0]?.value
});
const dateString = new Date().getFullYear() + "-01-01";

const attributesOptions = ref([]);

const formDataByType = ref({
  date: transTime(new Date()),
  type: typeOptions.value[0]?.name,
  typeId: attributesOptions?.value[0]?.id
});

// const handleChangeType = async val => {
//   if (val === "series") {
//     await getAllSeries().then(res => {
//       if (res.success) {
//         attributesOptions.value = res.data;
//       }
//     });
//   } else if (val === "function") {
//     await getAllFunction().then(res => {
//       if (res.success) {
//         attributesOptions.value = res.data;
//       }
//     });
//   }
//   formDataByType.value.typeId = attributesOptions?.value[0]?.id;
// };

//查询产品系列
const seriesOption = ref([]);
const getProductSeries = () => {
  getAllSeries().then(res => {
    if (res.success) {
      seriesOption.value = res.data;
      handleChangeType("series");
    }
  });
};
//查询产品类型
const functionOption = ref([]);
const getProductFunction = () => {
  getAllFunction().then(res => {
    if (res.success) {
      functionOption.value = res.data;
    }
  });
};
//查询功能类型
const functionallyOption = ref([]);
const getFunctionally = () => {
  getAllFunctionally().then(res => {
    if (res.success) {
      functionallyOption.value = res.data;
    }
  });
};

const handleChangeType = async val => {
  if (val === "series") {
    attributesOptions.value = seriesOption.value;
  } else if (val === "function") {
    attributesOptions.value = functionOption.value;
  } else if (val === "functionally") {
    attributesOptions.value = functionallyOption.value;
  }
  formDataByType.value.typeId = attributesOptions?.value[0]?.id;
  getDataSaleTwo();
};

//表一
const rules = computed(() => {
  return {
    date: [
      {
        required: true,
        message: t("salesBoard.saleChartsTwo.dateReg"),
        trigger: "change"
      }
    ],
    customer: [
      {
        required: true,
        message: t("salesBoard.saleChartsTwo.customerReg"),
        trigger: "change"
      }
    ]
  };
});
const rulesForm = ref(null);
const getDataSaleOne = () => {
  if (rulesForm.value) {
    rulesForm.value.validate(valid => {
      if (valid) {
        formData.customer = Array.isArray(formData.customer)
          ? formData.customer[1]
          : formData.customer;
        getTopNumberProductSaleInfoByCondition(formData).then(res => {
          if (salesBarOne.value === "US$m") {
            res.data.saleMonsy.forEach(item => {
              item.data = (item.data / 1000000).toFixed(4);
            });
          } else if (salesBarOne.value === "USD") {
            res.data.saleMonsy = res.data.saleMonsy;
          } else if (salesBarOne.value === "CNY") {
            res.data.saleMonsy.forEach(
              item => (item.data = (item.data * cnyRate).toFixed(2))
            );
          }
          let salesOne = res.data.saleMonsy;
          let salesTwo = res.data.qty;
          nextTick(() => {
            sales(salesOne, 0, t("salesBoard.saleChartsTwo.salesTotal"));
            sales(salesTwo, 1, t("salesBoard.saleChartsTwo.qtyTotal"));
          });
        });
      }
    });
  }
};
// const titleData = ref([
//   t("salesBoard.saleChartsTwo.salesTotal"),
//   t("salesBoard.saleChartsTwo.qtyTotal"),
//   t("salesBoard.saleChartsTwo.salesThree"),
//   t("salesBoard.saleChartsTwo.salesFour")
// ]);

const salesBarOne = ref(rate[1]);
const salesBarThree = ref(rate[1]);
const sales = (arr, index, title) => {
  let xData = [];
  let yData = [];
  arr.forEach(op => {
    yData.push(op.data);
    xData.push(op.productName);
  });

  let option = {
    title: {
      text: title,
      left: "center",
      textStyle: {}
    },
    tooltip: {
      trigger: "axis",
      axisPointer: {
        type: "shadow"
      }
    },
    // legend: {
    //   data: xData
    //   // top: "2%",
    //   // icon: "rect",
    //   // left: "2%"
    // },
    grid: {
      left: "6%",
      right: "3%",
      bottom: "0",
      top: "10%",
      containLabel: true
    },
    xAxis: {
      type: "category",
      data: xData,
      axisLabel: {
        interval: 0,
        rotate: index === 1 || index === 0 ? 45 : 0, // 将标签倾斜45度
        formatter:
          index === 2 || index === 3
            ? function (value) {
                var re = /(.{1,15})(?=(?:\s|$))/g;
                return value.replace(re, "$1\n"); // 每个字符换行，可根据实际需求调整
              }
            : function (value) {
                if (value.length > 20) {
                  return value.substring(0, 20) + "...";
                }
                return value;
              }
      }
    },
    yAxis: {
      type: "value",
      name:
        index === 0
          ? salesBarOne.value
          : index === 1
            ? t("status.salesQuantity")
            : index === 2
              ? salesBarThree.value
              : t("status.salesQuantity"),
      nameTextStyle: {
        fontWeight: "600"
      },
      axisLabel: {
        fontSize: 14
      }
    },
    toolbox: {
      show: index === 3 || index === 1 ? false : true,
      itemSize: 14,
      itemGap: 2,
      feature: {
        myTool1: {
          show: true, //是否显示
          title: "US$m", //鼠标悬空的提示文字
          icon: "path://M337.6384 303.04h85.1072L488.128 482.56c8.3072 23.872 15.5648 49.3184 23.36 74.24h2.56c8.2944-24.9088 15.0656-50.3552 23.36-74.24l63.8208-179.5328h85.1072v384h-70.0288V526.6944c0-36.3264 5.696-89.7792 9.3312-126.0928h-2.0736l-31.1296 90.2784-59.1616 161.3824h-44.1088L429.504 490.88 398.8864 400.64H396.8c3.6352 36.3136 9.856 89.7664 9.856 126.0928v160.3072h-69.0176z",
          onclick: e => {
            if (index === 0) {
              salesBarOne.value = "US$m";
              getDataSaleOne();
            } else if (index === 2) {
              salesBarThree.value = "US$m";
              getDataSaleTwo();
            }
          }
        },
        myTool2: {
          show: true, //是否显示
          title: "USD", //鼠标悬空的提示文字
          icon: "path://M568.612571 493.275429l-16.603428-5.193143V196.754286l31.670857 11.190857c33.206857 11.702857 59.830857 35.620571 78.848 70.582857 2.998857 4.461714 9.728 6.948571 19.529143 7.314286a19.309714 19.309714 0 0 0 16.749714-10.24c3.803429-10.24 4.534857-18.578286 1.901714-22.893715-32.694857-54.125714-76.288-86.893714-129.609142-97.426285l-19.017143-3.803429v-55.222857a29.696 29.696 0 0 0-5.412572-19.017143C545.426286 76.068571 541.257143 73.142857 528.822857 73.142857c-8.045714 0-13.897143 1.828571-17.846857 5.339429-2.925714 2.925714-4.900571 9.654857-5.266286 17.846857v57.051428l-21.211428 2.340572c-43.300571 4.534857-78.994286 21.357714-106.422857 50.102857-31.817143 31.817143-48.274286 75.044571-48.932572 128.512 0 85.796571 52.150857 142.994286 159.451429 174.957714l17.115428 4.973715v314.294857l-30.427428-8.777143c-38.912-11.264-71.460571-36.278857-96.768-74.24-5.339429-7.753143-13.385143-11.556571-25.088-11.995429-7.899429 0-11.556571 2.340571-14.043429 8.338286-3.437714 12.288-2.852571 22.162286 1.682286 29.988571 34.742857 54.857143 83.382857 87.771429 144.603428 97.718858l20.041143 3.218285v54.857143c0 9.216 1.755429 15.725714 5.266286 19.017143 1.316571 1.243429 5.558857 4.169143 17.846857 4.169143 6.582857 0 12.434286-2.048 17.92-6.217143 3.510857-2.706286 5.266286-8.411429 5.266286-16.969143v-54.710857l19.748571-3.364571c38.4-6.582857 72.557714-23.698286 101.668572-50.761143 35.913143-34.011429 54.491429-77.092571 55.149714-128 0-98.816-52.370286-163.474286-159.963429-197.558857z m-62.902857-15.579429l-33.792-15.652571c-63.049143-29.330286-95.524571-72.265143-96.548571-127.707429 0-39.716571 12.288-72.557714 36.278857-97.426286 15.579429-17.554286 38.034286-28.745143 66.56-33.353143l27.501714-4.388571v278.528z m133.851429 310.198857c-15.506286 13.897143-34.230857 24.868571-55.734857 32.548572l-31.817143 11.410285V525.970286l34.596571 17.334857c62.610286 31.817143 94.793143 81.408 95.670857 147.456 0 38.912-14.336 71.606857-42.642285 97.133714z",
          onclick: e => {
            if (index === 0) {
              salesBarOne.value = "USD";
              getDataSaleOne();
            } else if (index === 2) {
              salesBarThree.value = "USD";
              getDataSaleTwo();
            }
          }
        },
        myTool3: {
          show: true, //是否显示
          title: "CNY", //鼠标悬空的提示文字
          icon: "path://M675.861 192l45.611 44.907-166.997 169.6H792v64H544v144.597h248v64H544v176.597h-64V679.104H232v-64h248V470.507H232v-64h237.483l-166.955-169.6L348.138 192 512 358.464 675.861 192z",
          onclick: e => {
            if (index === 0) {
              salesBarOne.value = "CNY";
              getDataSaleOne();
            } else if (index === 2) {
              salesBarThree.value = "CNY";
              getDataSaleTwo();
            }
          }
        }
      }
    },
    series: [
      {
        data: yData,
        type: "bar",
        barWidth: index === 1 || index === 0 ? 20 : null,
        label: { show: true, position: "top" }
      }
    ]
  };

  if (index === 0) {
    let salesTop = echarts.init(document.getElementById("salesTop"));
    salesTop.clear();
    document.getElementById("salesTop").removeAttribute("_echarts_instance_");
    option && salesTop.setOption(option);
  } else if (index === 1) {
    let qtyTop = echarts.init(document.getElementById("qtyTop"));
    qtyTop.clear();
    document.getElementById("qtyTop").removeAttribute("_echarts_instance_");
    option && qtyTop.setOption(option);
  } else if (index === 2) {
    let salesThree = echarts.init(document.getElementById("salesThree"));
    salesThree.clear();
    document.getElementById("salesThree").removeAttribute("_echarts_instance_");
    option && salesThree.setOption(option);
  } else if (index === 3) {
    let salesFour = echarts.init(document.getElementById("salesFour"));
    salesFour.clear();
    document.getElementById("salesFour").removeAttribute("_echarts_instance_");
    option && salesFour.setOption(option);
  }
};

//表二和表三
const rulesType = computed(() => {
  return {
    date: [
      {
        required: true,
        message: t("salesBoard.saleChartsTwo.dateReg"),
        trigger: "change"
      }
    ],
    type: [
      {
        required: true,
        message: t("salesBoard.saleChartsTwo.typeReg"),
        trigger: "change"
      }
    ],
    typeId: [
      {
        required: true,
        message: t("salesBoard.saleChartsTwo.typeIdReg"),
        trigger: "change"
      }
    ]
  };
});
const rulesTypeForm = ref(null);
const getDataSaleTwo = () => {
  if (rulesTypeForm.value) {
    rulesTypeForm.value.validate(valid => {
      if (valid) {
        if (formDataByType.value.type == "series") {
          delete formDataByType.value.function;
          formDataByType.value.series = formDataByType.value.typeId;
        } else if (formDataByType.value.type == "function") {
          delete formDataByType.value.series;
          formDataByType.value.function = formDataByType.value.typeId;
        }
        getTopNumberProductTypeSaleInfoByCondition(formDataByType.value).then(
          res => {
            if (salesBarThree.value === "US$m") {
              res.data.saleMonsy.forEach(
                item => (item.data = (item.data / 1000000).toFixed(4))
              );
            } else if (salesBarThree.value === "USD") {
              res.data.saleMonsy = res.data.saleMonsy;
            } else if (salesBarThree.value === "CNY") {
              res.data.saleMonsy.forEach(
                item => (item.data = (item.data * cnyRate).toFixed(2))
              );
            }
            let salesThree = res.data.saleMonsy;
            let salesFour = res.data.qty;
            nextTick(() => {
              sales(salesThree, 2, t("salesBoard.saleChartsTwo.salesThree"));
              sales(salesFour, 3, t("salesBoard.saleChartsTwo.salesFour"));
            });
          }
        );
      }
    });
  }
};

onMounted(async () => {
  await getProductSeries();
  await getProductFunction();
  await getFunctionally();
  // await handleChangeType("series");
  getDataSaleOne();
  // getDataSaleTwo();
  window.addEventListener("setItemEvent", e => {
    handleChangeType("series");
    getDataSaleOne();
    getDataSaleTwo();
  });
});

onUnmounted(() => {
  // 移除对 sessionStorage 的监听
  window.removeEventListener("setItemEvent", () => {});
});
</script>

<style lang="scss" scoped>
:deep(.el-card) {
  --el-card-border-color: none;

  /* 解决概率进度条宽度 */
  .el-progress--line {
    width: 85%;
  }

  /* 解决概率进度条字体大小 */
  .el-progress-bar__innerText {
    font-size: 15px;
  }

  /* 隐藏 el-scrollbar 滚动条 */
  .el-scrollbar__bar {
    display: none;
  }

  /* el-timeline 每一项上下、左右边距 */
  .el-timeline-item {
    margin: 0 6px;
  }
}
:deep(.el-form--inline .el-form-item) {
  margin-right: 20px !important;
}
.main-content {
  margin: 20px 20px 0 !important;
  background: none !important;
  padding: 0 !important;
}
</style>
