<template>
  <el-row
    :gutter="24"
    justify="space-around"
    type="flex"
  >
    <!-- 月份柱状 -->
    <re-col
      v-motion
      class="mb-[18px]"
      :value="24"
      :xs="24"
      :initial="{
        opacity: 0,
        y: 100
      }"
      :enter="{
            opacity: 1,
            y: 0,
            transition: {
              delay: 400
            }
          }"
      style="padding-left:0;padding-right:0;"
    >
      <el-card
        class="bar-card"
        shadow="never"
      >
        <!-- 检索框 -->
        <el-form style="display:flex;flex-wrap: wrap;">
          <el-form-item
            style="margin-left:20px"
            class="item_select"
            :label="t(`salesBoard.saleChartsThree.productName`)"
          >
            <el-select
              v-model="productName"
              placeholder="请选择"
              style="width: 380px;"
              filterable
              remote
            >
              <el-option
                v-for="item in productList"
                :key="item.name"
                :label="item.name"
                :value="item.name"
              >
              </el-option>
            </el-select>
          </el-form-item>
          <el-form-item style="margin-left:20px">
            <el-button
              type="primary"
              @click="getOneChartData"
            >{{t(`salesBoard.saleChartsThree.inquire`)}}</el-button>
          </el-form-item>
        </el-form>

        <div class="flex justify-between">
          <!-- <span class="text-md font-medium">产品销售额</span> -->
        </div>
        <div class="flex justify-between items-start mt-3 onecharts">
          <div
            id="month-bar"
            style="width: 100%; height: 450px"
            ref="monthBarChart"
          ></div>
        </div>
      </el-card>
    </re-col>
    <!--经销商销售额  -->
    <re-col
      v-motion
      class="mb-[18px]"
      :value="24"
      :xs="24"
      :initial="{
        opacity: 0,
        y: 100
      }"
      :enter="{
            opacity: 1,
            y: 0,
            transition: {
              delay: 400
            }
          }"
      style="padding-left:0;padding-right:0;margin-top:10px"
    >
      <el-card
        class="bar-card"
        shadow="never"
      >
        <el-form
          :model="searchTwoForm"
          style="display:flex;flex-wrap: wrap;"
        >
          <el-form-item :label="t(`salesBoard.common.date`)">
            <el-date-picker
              v-model="searchTwoForm.date"
              type="month"
              :placeholder="t(`salesBoard.saleChartsThree.datePlaceholder`)"
              value-format="YYYY-MM-DD"
            />
          </el-form-item>
          <!-- 地区 -->
          <!-- <el-form-item
            style="margin-left:20px"
            class="item_select"
           :label="t(`salesBoard.common.region`)"
          >
            <el-select
              v-model="searchTwoForm.regionId"
              filterable
              remote
            >
              <el-option
                v-for="item in regionList"
                :key="item.resourceId"
                :label="item.name"
                :value="item.resourceId"
              >
              </el-option>
            </el-select>
          </el-form-item> -->
          <el-form-item
            style="margin-left:20px"
            class="item_select"
          >
            <template #label>
              <el-select
                v-model="searchTwoForm.regionSelect"
                :placeholder="t(`salesBoard.common.commonPlaceHolder`)"
                style="width:100px;margin-right:-5px"
                @change="changeArea"
              >
                <el-option
                  :label="t(`salesBoard.common.region`)"
                  value="地区"
                />
                <el-option
                  :label="t(`salesBoard.common.nation`)"
                  value="国家"
                />

              </el-select>
            </template>
            <!-- 国家 -->
            <el-select
              v-if="searchTwoForm.regionSelect == '国家'"
              v-model="searchTwoForm.countryList"
              :placeholder="t(`salesBoard.common.commonPlaceHolder`)"
              multiple
              style="width:100%"
              clearable
              filterable
              remote
            >
              <el-option
                v-for="item in fourAreaList"
                :key="item.name"
                :label="item.name"
                :value="item.resourceId"
              >
              </el-option>
            </el-select>
            <!-- 地区 -->
            <el-cascader
              v-else
              v-model="searchTwoForm.regionId"
              :options="regionList"
              :placeholder="t(`salesBoard.common.commonPlaceHolder`)"
              :props="cascaderProps"
            ></el-cascader>
          </el-form-item>
          <el-form-item
            :label="t(`salesBoard.common.user`)"
            style="margin-left:20px"
            class="item_select"
          >
            <el-input
              v-model="searchTwoForm.customer"
              disabled
            />
          </el-form-item>
          <el-form-item style="margin-left:20px">
            <el-button
              type="primary"
              @click="searchTopTen"
            >{{t(`salesBoard.saleChartsThree.inquire`)}}</el-button>
          </el-form-item>
        </el-form>
        <div class="flex justify-between">
          <!-- <span class="text-md font-medium">产品销售额</span> -->
        </div>
        <div class="flex justify-between items-start mt-3">
          <div
            id="twenty-bar"
            style="width: 100%; height: 600px"
            ref="twentyBarChart"
          ></div>
        </div>
      </el-card>
    </re-col>
    <!-- 库存余额和销售量提示 -->
    <div class="dataTip">
      <div style="display:flex;justify-content:space-between">
        <div>{{t(`salesBoard.saleChartsThree.currentDate`)}}</div>
        <div style="font-weight:600">{{currentDate}}</div>
      </div>
      <div style="display:flex;justify-content:space-between;margin-top:5px">
        <div>{{t(`salesBoard.saleChartsThree.inventory`)}}</div>
        <div>{{inventory}}</div>
      </div>
      <div style="display:flex;justify-content:space-between;margin-top:5px">
        <div>{{t(`salesBoard.saleChartsThree.averageSales`)}}</div>
        <div style="margin-left:20px">{{averageSales}}</div>
      </div>
    </div>
  </el-row>
</template>
  <script setup>
import ReCol from "@/components/ReCol";
import { ref, computed, watch, nextTick, onMounted, onUnmounted, reactive } from "vue";
import * as echarts from 'echarts';
import { getOneData, getTwoData } from "@/api/biDataBoard/saleChartsFour";
import { getAllProductBaseInfo } from "@/api/permission/product";
import { useI18n } from "vue-i18n";
import { storageLocal } from "@/store/utils"
const { t } = useI18n();

//产品list
let productList = ref([])
let productName = ref('')
const getProductData = () => {
  getAllProductBaseInfo().then(res => {
    productList.value = res.data
    productName.value = res.data[0]?.name || ''
    getOneChartData()
  })
}
// 获取第一个图表数据
let averageSales = ref('')
let inventory = ref('')
const getOneChartData = () => {
  getOneData(productName.value).then(res => {
    averageSales.value = res.data?.average3MonthsSaleQuantity || 0
    inventory.value = res.data?.inventory || 0
    let arr = res.data?.rollMonthContentList || []
    nextTick(() => {
      receivableMonthBar(arr)
    })
  })
}
// 产品销售额
let monthBarChart = ref(null)
const receivableMonthBar = (arr) => {
  let xData = []
  let yData = []
  arr.forEach(op => {
    yData.push(op.total)
    xData.push(op.dateString)
  })
  let myChart = echarts.init(document.getElementById("month-bar"));
  document.getElementById("month-bar").removeAttribute("_echarts_instance_");
  myChart.setOption({
    title: {
      text: t(`salesBoard.saleChartsThree.productSaleTitle`),
      left: 'center',
      textStyle: {

      }
    },
    tooltip: {
      trigger: "axis",
      axisPointer: {
        type: "shadow",
      },
    },
    grid: {
      left: "4%",
      right: "4%",
      bottom: "0",
      top: '10%',
      containLabel: true,
    },
    xAxis: {
      type: 'category',
      data: xData,
      axisLabel: {
        rotate: 45 // 将标签倾斜45度
      }
    },
    yAxis: {
      type: 'value',
      name: '$',
      nameTextStyle: {
        fontWeight: '600'
      }
    },
    series: [
      {
        data: yData,
        type: 'bar',
        barWidth: 20,
      },
      {
        type: 'line',
        data: yData,
        tooltip: {
          trigger: 'none'
        }
      }
    ]
  })
}
//获取当前年月日
let currentDate = ref(null)
const getCurrentDate = () => {
  let time = new Date();
  let Year = time.getFullYear() //获取当前年份
  let Month = ('0' + (time.getMonth() + 1)).slice(-2); //获取当前月份(0-11,0代表1月)
  let day = ('0' + time.getDate()).slice(-2); // 日
  let yearList = Year + '-' + Month + '-' + day //年月日 (Month+1)月份从0开始所以加1
  currentDate.value = Year + '-' + Month
  return yearList
}

// 选择区域或国家
let areaType = ref('')
const changeArea = (type) => {
  areaType.value = type
}


// 获取其他资源（当前账号拥有的）
let regionList = ref([])
// 获取国家(四级资源)
let fourAreaList = ref([])
const getAreaData = () => {
  let arr = storageLocal().getItem('user-info')?.resourceInfoVoList
  arr.forEach(op => {
    op.level == 4 ? fourAreaList.value.push(op) : regionList.value.push(op)
  })
  searchTwoForm.regionId = regionList.value[0]?.resourceId
  let newArr = filterTreeByLevel(regionList.value, 3)
  regionList.value = newArr
}

// 过滤第四级资源
const filterTreeByLevel = (tree, level) => {
  return tree.map(node => {
    const newNode = { ...node };
    if (newNode.level === level) {
      delete newNode.childrenList;
    } else if (newNode.childrenList && newNode.childrenList.length > 0) {
      newNode.childrenList = filterTreeByLevel(newNode.childrenList, level);
    }
    return newNode;
  });
}
const cascaderProps = reactive({
  checkStrictly: true,
  label: 'name',
  value: 'resourceId',
  children: 'childrenList',
  emitPath: false
})

let searchTwoForm = reactive({
  customer: storageLocal().getItem('user-info')?.userName || '',
  regionId: regionList[0]?.resourceId,
  date: getCurrentDate(),
  regionSelect: '地区',
  countryList: []
})

// 查询
const searchTopTen = () => {
  areaType.value == '国家' ? searchTwoForm.regionId = '' : searchTwoForm.countryList = []
  getTwoChartData()
}

// 获取第二个图表数据
const getTwoChartData = () => {
  getTwoData(searchTwoForm).then(res => {
    let arr = res.data || []
    nextTick(() => {
      receivableBar(arr)
    })
  })
}
// 经销商销售额
let twentyBarChart = ref(null)
const receivableBar = (arr) => {
  let xData = []
  let yData = []
  arr.forEach(op => {
    yData.push(op.data)
    xData.push(op.productName)
  })
  let myChart = echarts.init(document.getElementById("twenty-bar"));
  document.getElementById("twenty-bar").removeAttribute("_echarts_instance_");
  myChart.setOption({
    title: {
      text: t(`salesBoard.saleChartsThree.agencySale`),
      left: 'center',
      textStyle: {

      }
    },
    tooltip: {
      trigger: "axis",
      axisPointer: {
        type: "shadow",
      },
    },
    // legend: {
    //   top: '2%',
    //   icon: 'rect',
    //   left: '2%'
    // },
    grid: {
      left: "4%",
      right: "4%",
      bottom: "0",
      top: '10%',
      containLabel: true,
    },
    xAxis: {
      type: 'category',
      data: xData,
      axisLabel: {
        rotate: 45 // 将标签倾斜45度
      }
    },
    yAxis: {
      type: 'value',
      name: '$',
      nameTextStyle: {
        fontWeight: '600'
      }
    },
    series: [
      {
        data: yData,
        type: 'bar',
        barWidth: 20,
      },
    ]
  })
}

// 获取应收账款数据
const getData = () => {
  getSalesData().then(res => {
    let twentyArr = res.data.countrySaleDataList
    let monthArr = res.data.monthDatatList
    nextTick(() => {
      receivableBar(twentyArr)
      receivableMonthBar(monthArr)
    })
  })
}
onMounted(() => {
  getAreaData()
  getProductData()
  getTwoChartData()
  // 监听语言切换，重新渲染图表
  window.addEventListener("setItemEvent", (e) => {
    getProductData()
    getTwoChartData()
  });
})

onUnmounted(() => {
  // 移除对 sessionStorage 的监听
  window.removeEventListener("setItemEvent", () => { });
})

  </script>
  <style lang="scss" scoped>
  :deep(.el-card) {
    --el-card-border-color: none;
  
    /* 解决概率进度条宽度 */
    .el-progress--line {
      width: 85%;
    }
  
    /* 解决概率进度条字体大小 */
    .el-progress-bar__innerText {
      font-size: 15px;
    }
  
    /* 隐藏 el-scrollbar 滚动条 */
    .el-scrollbar__bar {
      display: none;
    }
  
    /* el-timeline 每一项上下、左右边距 */
    .el-timeline-item {
      margin: 0 6px;
    }
  }
  
  .main-content {
    margin: 20px 20px 0 !important;
    background: none !important;
    padding: 0 !important;
  }
  .onecharts{
    position: relative;
  }
  .dataTip{
    border:1px solid #a7a3a3;
    padding: 10px;
    position: absolute;
    right: 2%;
    top: 2%;
  }
  :deep(.item_select ) {
  min-width: 200px; /* 设置最小宽度 */
}
  </style>