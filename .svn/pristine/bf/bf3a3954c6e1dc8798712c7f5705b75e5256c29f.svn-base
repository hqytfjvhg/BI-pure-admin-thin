<script setup lang="js">
import { isAllEmpty } from "@pureadmin/utils";
import { useNav } from "@/layout/hooks/useNav";
import LaySearch from "../lay-search/index.vue";
import LayNotice from "../lay-notice/index.vue";
import { ref, toRaw, watch, onMounted, nextTick, computed } from "vue";
import { useRenderIcon } from "@/components/ReIcon/src/hooks";
import {
  getParentPaths,
  findRouteByPath,
  filterTree,
  ascending
} from "@/router/utils";
import { usePermissionStoreHook } from "@/store/modules/permission";
import LaySidebarExtraIcon from "../lay-sidebar/components/SidebarExtraIcon.vue";
import LaySidebarFullScreen from "../lay-sidebar/components/SidebarFullScreen.vue";
import { transformI18n } from "@/plugins/i18n";
import { useTranslationLang } from "../../hooks/useTranslationLang";
import LaySidebarRefresh from "../lay-sidebar/components/SidebarRefresh.vue";
import { storageLocal } from "@pureadmin/utils";

import GlobalizationIcon from "@/assets/svg/globalization.svg?component";
import LogoutCircleRLine from "@iconify-icons/ri/logout-circle-r-line";
import Setting from "@iconify-icons/ri/settings-3-line";
import Check from "@iconify-icons/ep/check";

import { reactive } from "vue";
import Dialog from "@/components/dialog/changePass.vue";

const menuRef = ref();
const defaultActive = ref(null);

const { t, route, locale, translationCh, translationEn, translationHk } =
  useTranslationLang(menuRef);
const {
  device,
  logout,
  onPanel,
  resolvePath,
  username,
  userAvatar,
  getDivStyle,
  avatarsStyle,
  getDropdownItemStyle,
  getDropdownItemClass
} = useNav();
// 切换语言
const changeLanguage = type => {
  type == "zh"
    ? translationCh()
    : type == "hk"
      ? translationHk()
      : translationEn();
  sessionStorage.setItem("languageShow", type);
};
function getDefaultActive(routePath) {
  const wholeMenus = usePermissionStoreHook().constantMenus;
  /** 当前路由的父级路径 */
  const parentRoutes = getParentPaths(routePath, wholeMenus)[0];
  defaultActive.value = !isAllEmpty(route.meta?.activePath)
    ? route.meta.activePath
    : findRouteByPath(parentRoutes, wholeMenus)?.children[0]?.path;
}

//登录返回的角色和路由所能访问的角色进行判断
const menus = routes => {
  return routes.filter(route => {
    // let hasAccess =
    //   !route.meta?.roles ||
    //   route.meta?.roles?.includes(storageLocal().getItem("user-info").roleName);
    let hasAccess;
    if (!route.meta?.roles) {
      hasAccess = true;
    } else {
      hasAccess = route.meta.roles.includes(
        storageLocal().getItem("user-info")?.roleName
      );
    }
    // if (hasAccess && route.children) {
    //   // 对子路由进行同样的过滤
    //   route.children = menus(route.children);
    // }
    return hasAccess;
  });
};

const menuData = computed(() => {
  // usePermissionStoreHook().wholeMenus是前后端的路由合并，本项目仅需前端静态路由,所以在动态路由传参是空数组
  return menus(filterTree(ascending(usePermissionStoreHook().constantMenus)));
});
onMounted(() => {
  getDefaultActive(route.path);
});

nextTick(() => {
  menuRef.value?.handleResize();
});

watch(
  () => [route.path, usePermissionStoreHook().constantMenus],
  () => {
    getDefaultActive(route.path);
  }
);

const dialog = reactive({
  show: false
});
const changePass = () => {
  dialog.show = true;
};
</script>

<template>
  <!-- v-loading="usePermissionStoreHook().wholeMenus.length === 0" -->
  <div v-if="device !== 'mobile'" class="horizontal-header">
    <el-menu
      ref="menuRef"
      router
      mode="horizontal"
      popper-class="pure-scrollbar"
      class="horizontal-header-menu"
      :default-active="defaultActive"
    >
      <!-- TODO -->
      <el-menu-item
        v-for="route in menuData"
        :key="route.path"
        :index="resolvePath(route) || route.redirect"
      >
        <template #title>
          <div
            v-if="toRaw(route.meta.icon)"
            :class="['sub-menu-icon', route.meta.icon]"
          >
            <component
              :is="useRenderIcon(route.meta && toRaw(route.meta.icon))"
            />
          </div>
          <div :style="getDivStyle">
            <span class="select-none">
              {{ transformI18n(route.meta.title) }}
            </span>
            <LaySidebarExtraIcon :extraIcon="route.meta.extraIcon" />
          </div>
        </template>
      </el-menu-item>
    </el-menu>
    <div class="horizontal-header-right">
      <!-- 菜单搜索 -->
      <!-- <LaySearch id="header-search" /> -->
      <!-- 刷新 -->
      <LaySidebarRefresh id="header-refresh" />
      <!-- 国际化 -->
      <el-dropdown id="header-translation" trigger="click">
        <GlobalizationIcon
          class="navbar-bg-hover w-[40px] h-[48px] p-[11px] cursor-pointer outline-none"
        />
        <template #dropdown>
          <el-dropdown-menu class="translation">
            <el-dropdown-item
              :style="getDropdownItemStyle(locale, 'zh')"
              :class="['dark:!text-white', getDropdownItemClass(locale, 'zh')]"
              @click="changeLanguage('zh')"
            >
              <span v-show="locale === 'zh'" class="check-zh">
                <IconifyIconOffline :icon="Check" />
              </span>
              简体中文
            </el-dropdown-item>
            <el-dropdown-item
              :style="getDropdownItemStyle(locale, 'hk')"
              :class="['dark:!text-white', getDropdownItemClass(locale, 'hk')]"
              @click="changeLanguage('hk')"
            >
              <span v-show="locale === 'hk'" class="check-en">
                <IconifyIconOffline :icon="Check" />
              </span>
              繁體中文
            </el-dropdown-item>
            <el-dropdown-item
              :style="getDropdownItemStyle(locale, 'en')"
              :class="['dark:!text-white', getDropdownItemClass(locale, 'en')]"
              @click="changeLanguage('en')"
            >
              <span v-show="locale === 'en'" class="check-en">
                <IconifyIconOffline :icon="Check" />
              </span>
              English
            </el-dropdown-item>
          </el-dropdown-menu>
        </template>
      </el-dropdown>
      <!-- 全屏 -->
      <!-- <LaySidebarFullScreen id="full-screen" /> -->
      <!-- 消息通知 -->
      <!-- <LayNotice id="header-notice" /> -->
      <!-- 退出登录 -->
      <el-dropdown trigger="click">
        <span class="select-none el-dropdown-link navbar-bg-hover">
          <img :src="userAvatar" :style="avatarsStyle" />
          <p v-if="username" class="dark:text-white">{{ username }}</p>
        </span>
        <template #dropdown>
          <el-dropdown-menu class="logout">
            <el-dropdown-item @click="changePass">
              <IconifyIconOffline :icon="Check" style="margin: 5px" />
              {{ t("status.pass") }}
            </el-dropdown-item>
            <el-dropdown-item @click="logout">
              <IconifyIconOffline
                :icon="LogoutCircleRLine"
                style="margin: 5px"
              />
              {{ t("status.logout") }}
            </el-dropdown-item>
          </el-dropdown-menu>
        </template>
      </el-dropdown>
      <span
        class="set-icon navbar-bg-hover"
        title="打开系统配置"
        @click="onPanel"
      >
        <IconifyIconOffline :icon="Setting" />
      </span>
    </div>

    <!-- 修改密码弹窗 -->
    <Dialog :dialog="dialog" v-if="dialog.show" />
  </div>
</template>

<style lang="scss" scoped>
:deep(.el-loading-mask) {
  opacity: 0.45;
}

.translation {
  ::v-deep(.el-dropdown-menu__item) {
    padding: 5px 40px;
  }

  .check-zh {
    position: absolute;
    left: 20px;
  }

  .check-en {
    position: absolute;
    left: 20px;
  }
}

.logout {
  width: 120px;

  ::v-deep(.el-dropdown-menu__item) {
    display: inline-flex;
    flex-wrap: wrap;
    min-width: 100%;
  }
}
</style>
