<template>
  <el-row :gutter="24" justify="space-around" type="flex" class="onecharts">
    <!-- 月份柱状 -->
    <re-col
      v-motion
      class="mb-[18px]"
      :value="24"
      :xs="24"
      :initial="{
        opacity: 0,
        y: 100
      }"
      :enter="{
        opacity: 1,
        y: 0,
        transition: {
          delay: 400
        }
      }"
      style="padding-left: 0; padding-right: 0"
    >
      <el-card class="bar-card" shadow="never">
        <!-- 检索框 -->
        <el-form
          style="display: flex; flex-wrap: wrap"
          :rules="oneRules"
          ref="oneForm"
          :model="product"
        >
          <el-form-item
            style="margin-left: 20px"
            class="item_select"
            :label="t(`salesBoard.saleChartsThree.productName`)"
            prop="name"
          >
            <el-select
              v-model="product.name"
              :placeholder="t(`salesBoard.common.commonPlaceHolder`)"
              style="width: 240px"
              filterable
              remote
            >
              <el-option
                v-for="item in productList"
                :key="item.name"
                :label="item.name"
                :value="item.name"
              />
            </el-select>
          </el-form-item>
          <el-form-item
            style="margin-left: 20px"
            class="item_select"
            :label="t(`salesBoard.saleChartsThree.month`)"
          >
            <el-date-picker
              v-model="timeArr"
              type="monthrange"
              range-separator="To"
              :start-placeholder="t(`salesBoard.saleChartsThree.starts`)"
              :end-placeholder="t(`salesBoard.saleChartsThree.endTime`)"
              value-format="YYYY-MM-DD"
              :disabled-date="disabledDate"
            />
          </el-form-item>
          <el-form-item style="margin-left: 20px">
            <el-button type="primary" @click="getOneChartData">{{
              t(`salesBoard.saleChartsThree.inquire`)
            }}</el-button>
          </el-form-item>

          <el-form-item style="color: #62c23a; margin-left: 20px">
            <span v-if="timeArr && timeArr.length > 0">{{
              t("salesBoard.common.dateStr") + timeArr[0] + "~" + timeArr[1]
            }}</span>
          </el-form-item>
        </el-form>

        <div class="flex justify-between">
          <!-- <span class="font-medium text-md">产品销售额</span> -->
        </div>
        <div class="flex items-start justify-between mt-3">
          <div
            id="month-bar"
            style="width: 100%; height: 450px"
            ref="monthBarChart"
          />
        </div>
      </el-card>
    </re-col>
    <!--经销商销售额  -->
    <re-col
      v-motion
      class="mb-[18px]"
      :value="24"
      :xs="24"
      :initial="{
        opacity: 0,
        y: 100
      }"
      :enter="{
        opacity: 1,
        y: 0,
        transition: {
          delay: 400
        }
      }"
      style="padding-left: 0; padding-right: 0; margin-top: 10px"
    >
      <el-card class="bar-card" shadow="never">
        <el-form
          :model="searchTwoForm"
          style="display: flex; flex-wrap: wrap"
          :rules="rules"
          ref="twoForm"
        >
          <el-form-item :label="t(`salesBoard.common.date`)" prop="date">
            <el-date-picker
              type="month"
              v-model="dateString"
              format="YYYY-MM"
              value-format="YYYY-MM-DD"
              :disabled="true"
              style="width: 100px"
            />--
            <el-date-picker
              v-model="searchTwoForm.date"
              type="month"
              :placeholder="t(`salesBoard.saleChartsThree.datePlaceholder`)"
              value-format="YYYY-MM-DD"
              style="width: 120px"
              :disabled-date="disabledDateTwo"
            />
          </el-form-item>
          <el-form-item
            style="margin-left: 20px"
            class="item_select"
            :label="t(`salesBoard.saleChartsThree.productName`)"
            prop="productName"
          >
            <el-select
              v-model="searchTwoForm.productName"
              :placeholder="t(`salesBoard.common.commonPlaceHolder`)"
              style="width: 240px"
              filterable
              remote
            >
              <el-option
                v-for="item in productList"
                :key="item.name"
                :label="item.name"
                :value="item.name"
              />
            </el-select>
          </el-form-item>
          <!-- 地区 -->
          <!-- <el-form-item
            style="margin-left: 20px"
            class="item_select"
           :label="t(`salesBoard.common.region`)"
          >
            <el-select
              v-model="searchTwoForm.regionId"
              filterable
              remote
            >
              <el-option
                v-for="item in regionList"
                :key="item.resourceId"
                :label="item.name"
                :value="item.resourceId"
              />
            </el-select>
          </el-form-item> -->
          <el-form-item
            v-if="regionList.length !== 0 || fourAreaList.length !== 0"
            style="margin-left: 20px"
            class="item_select"
            :prop="
              searchTwoForm.regionSelect == '国家' ? 'countryList' : 'regionId'
            "
          >
            <template #label>
              <el-select
                v-model="searchTwoForm.regionSelect"
                :placeholder="t(`salesBoard.common.commonPlaceHolder`)"
                style="width: 120px; margin-right: -5px"
                @change="changeArea"
              >
                <el-option
                  v-if="regionList.length > 0"
                  :label="t(`salesBoard.common.region`)"
                  value="地区"
                />
                <el-option
                  :label="t(`salesBoard.common.nation`)"
                  value="国家"
                />
              </el-select>
            </template>
            <!-- 国家 -->
            <el-select
              v-if="searchTwoForm.regionSelect == '国家'"
              v-model="searchTwoForm.countryList"
              :placeholder="t(`salesBoard.common.commonPlaceHolder`)"
              multiple
              style="min-width: 240px"
              clearable
              filterable
              remote
            >
              <el-option
                v-for="item in fourAreaList"
                :key="item.name"
                :label="locale === 'zh' ? item.name : item.enName"
                :value="item.resourceId"
              />
            </el-select>
            <!-- 地区 -->
            <el-cascader
              v-else
              v-model="searchTwoForm.regionId"
              :options="regionList"
              :placeholder="t(`salesBoard.common.commonPlaceHolder`)"
              :props="cascaderProps(locale)"
            />
          </el-form-item>
          <el-form-item
            :label="t(`salesBoard.common.user`)"
            style="margin-left: 20px"
            class="item_select"
            prop="customer"
          >
            <el-input v-model="searchTwoForm.customer" disabled />
          </el-form-item>
          <el-form-item style="margin-left: 20px">
            <el-button type="primary" @click="searchTopTen">{{
              t(`salesBoard.saleChartsThree.inquire`)
            }}</el-button>
          </el-form-item>

          <el-form-item style="color: #62c23a; margin-left: 20px">
            {{
              t("salesBoard.common.dateStr") +
              dateString +
              "~" +
              searchTwoForm.date
            }}
          </el-form-item>
        </el-form>
        <div class="flex justify-between">
          <!-- <span class="font-medium text-md">产品销售额</span> -->
        </div>
        <div class="flex items-start justify-between mt-3">
          <div
            id="twenty-bar"
            style="width: 100%; height: 600px"
            ref="twentyBarChart"
          />
        </div>
      </el-card>
    </re-col>
    <!-- 库存余额和销售量提示 -->
    <div class="dataTip" id="dataCard">
      <div style="display: flex; justify-content: space-between">
        <div>{{ t(`salesBoard.saleChartsThree.currentDate`) }}</div>
        <div style="font-weight: 600">{{ currentDate }}</div>
      </div>
      <div
        style="display: flex; justify-content: space-between; margin-top: 5px"
      >
        <div>{{ t(`salesBoard.saleChartsThree.inventory`) }}</div>
        <div>{{ inventory }}</div>
      </div>
      <div
        style="display: flex; justify-content: space-between; margin-top: 5px"
      >
        <div>{{ t(`salesBoard.saleChartsThree.averageSales`) }}</div>
        <div style="margin-left: 20px">{{ averageSales }}</div>
      </div>
    </div>
  </el-row>
</template>
<script setup>
import ReCol from "@/components/ReCol";
import {
  ref,
  computed,
  watch,
  nextTick,
  onMounted,
  onUnmounted,
  reactive
} from "vue";
import * as echarts from "echarts";
import { getOneData, getTwoData } from "@/api/biDataBoard/saleChartsFour";
import { getAllProductBaseInfo } from "@/api/permission/product";
import { useI18n } from "vue-i18n";
import { storageLocal } from "@/store/utils";
const { t, locale } = useI18n();
const rate = ["US$m", "USD", "CNY"];
const cnyRate = storageLocal().getItem("user-info")?.cnyRate;

const dateString = new Date().getFullYear() + "-01-01";

//产品list
let productList = ref([]);
let product = reactive({
  name: ""
});
const getProductData = () => {
  getAllProductBaseInfo().then(res => {
    productList.value = res.data;
    product.name = res.data[0]?.name || "";
    searchTwoForm.productName = res.data[0]?.name || "";
    getOneChartData();
    getTwoChartData();
  });
};

let oneForm = ref(null);
const oneRules = computed(() => {
  return {
    name: [
      {
        required: true,
        message: t(`salesBoard.common.commonPlaceHolder`),
        trigger: "blur"
      }
    ]
  };
});

// 获取第一个图表数据
let averageSales = ref("");
let inventory = ref("");
const paintBarTwoData = ref([]);
const getOneChartData = () => {
  oneForm.value.validate(valid => {
    if (valid) {
      getOneData(product.name, timeArr.value).then(res => {
        // let arr = res.data?.rollMonthContentList || []
        let arr = [];
        if (timeArr.value.length > 0) {
          arr = res.data?.rollMonthContentList || [];
        } else {
          let newArr = res.data?.rollMonthContentList.slice(-12);
          arr = newArr;
          paintBarTwoData.value = arr;
        }
        averageSales.value = res.data?.average3MonthsSaleQuantity || 0;
        inventory.value = res.data?.inventory || 0;
        nextTick(() => {
          receivableMonthBar(arr);
        });
      });
    }
  });
};
// 产品销量
let monthBarChart = ref(null);
const receivableMonthBar = arr => {
  let xData = [];
  let yData = [];
  arr.forEach(op => {
    yData.push(op.total);
    xData.push(locale.value === "zh" ? op.dateString : op.enDateString);
  });
  let myChart = echarts.init(document.getElementById("month-bar"));
  myChart.clear();
  document.getElementById("month-bar").removeAttribute("_echarts_instance_");
  myChart.setOption({
    title: {
      text: t(`salesBoard.saleChartsThree.productSaleTitle`),
      left: "center",
      textStyle: {}
    },
    tooltip: {
      trigger: "axis",
      axisPointer: {
        type: "shadow"
      }
    },
    grid: {
      left: "4%",
      right: "4%",
      bottom: "0",
      top: "10%",
      containLabel: true
    },
    xAxis: {
      type: "category",
      data: xData,
      axisLabel: {
        rotate: 45 // 将标签倾斜45度
      }
    },
    yAxis: {
      type: "value",
      name: t("status.salesQuantity"),
      nameTextStyle: {
        fontWeight: "600"
      },
      axisLabel: {
        fontSize: 14
      }
    },
    series: [
      {
        data: yData,
        type: "bar",
        barWidth: 20,
        label: { show: true, position: "top" }
      },
      {
        type: "line",
        data: yData,
        tooltip: {
          trigger: "none"
        }
      }
    ],
    dataZoom: [
      {
        // 设置滚动条的隐藏与显示
        show: true,
        // 设置滚动条类型
        type: "slider",
        // 设置背景颜色
        // backgroundColor: "rgb(19, 63, 100)",
        // 设置选中范围的填充颜色
        // fillerColor: "rgb(16, 171, 198)",
        // 设置边框颜色
        // borderColor: "rgb(19, 63, 100)",
        // 是否显示detail，即拖拽时候显示详细数值信息
        showDetail: false,
        // 数据窗口范围的起始数值
        startValue: 0,
        // 数据窗口范围的结束数值（一页显示多少条数据）
        endValue: 12,
        // empty：当前数据窗口外的数据，被设置为空。
        // 即不会影响其他轴的数据范围
        filterMode: "empty",
        // 设置滚动条宽度，相对于盒子宽度
        width: "60%",
        // 设置滚动条高度
        height: 8,
        // 设置滚动条显示位置
        left: "center",
        // 是否锁定选择区域（或叫做数据窗口）的大小
        zoomLoxk: true,
        // 控制手柄的尺寸
        handleSize: 0,
        // dataZoom-slider组件离容器下侧的距离
        bottom: 0
      },
      {
        // 没有下面这块的话，只能拖动滚动条，
        // 鼠标滚轮在区域内不能控制外部滚动条
        type: "inside",
        // 滚轮是否触发缩放
        zoomOnMouseWheel: false,
        // 鼠标滚轮触发滚动
        moveOnMouseMove: true,
        moveOnMouseWheel: true
      }
    ]
  });
};
//获取当前年月日
let currentDate = ref(null);
const getCurrentDate = () => {
  let time = new Date();
  let Year = time.getFullYear(); //获取当前年份
  let Month = ("0" + (time.getMonth() + 1)).slice(-2); //获取当前月份(0-11,0代表1月)
  let day = ("0" + time.getDate()).slice(-2); // 日
  let yearList = Year + "-" + Month + "-" + day; //年月日 (Month+1)月份从0开始所以加1
  currentDate.value =
    locale.value === "zh" ? Year + "-" + Month : Month + "-" + Year;
  return yearList;
};

// 选择区域或国家
let areaType = ref("");
const changeArea = type => {
  areaType.value = type;
};

// 获取其他资源（当前账号拥有的）
let regionList = ref([]);
// 获取国家(四级资源)
let fourAreaList = ref([]);
let fiveAreaList = ref([]);
const getAreaData = () => {
  let arr = storageLocal().getItem("user-info")?.resourceInfoVoList;
  // arr.forEach(op => {
  //   op.level == 4 ? fourAreaList.value.push(op) : regionList.value.push(op);
  // });
  arr.forEach(op => {
    op.level == 4
      ? fourAreaList.value.push(op)
      : op.level == 5
        ? fiveAreaList.value.push(op.resourceId)
        : regionList.value.push(op);
  });
  searchTwoForm.regionId = regionList.value[0]?.resourceId;
  let newArr = filterTreeByLevel(regionList.value, 3);
  regionList.value = newArr;
  fourAreaList.value = fourAreaList.value.concat(countryFourList.value);
};

// 过滤第四级资源
let countryFourList = ref([]);
const filterTreeByLevel = (tree, level) => {
  return tree.map(node => {
    const newNode = { ...node };
    if (newNode.level === level) {
      newNode.childrenList.forEach(op => {
        countryFourList.value.push(op);
      });
      delete newNode.childrenList;
    } else if (newNode.childrenList && newNode.childrenList.length > 0) {
      newNode.childrenList = filterTreeByLevel(newNode.childrenList, level);
    }
    return newNode;
  });
};
const cascaderProps = lang => {
  return {
    checkStrictly: true,
    label: lang === "zh" ? "name" : "enName",
    value: "resourceId",
    children: "childrenList",
    emitPath: false
  };
};

let searchTwoForm = reactive({
  customer: storageLocal().getItem("user-info")?.userName || "",
  regionId: regionList.value[0]?.resourceId,
  date: getCurrentDate(),
  regionSelect: "地区",
  countryList: [],
  distributorIdList: [],
  productName: productList.value[0]?.name || ""
});

// 时间区间
let timeArr = ref([]);
const disabledDate = time => {
  //时间禁用
  return time.getTime() > Date.now();
};

const disabledDateTwo = time => {
  const currentDate = new Date();
  const currentYear = currentDate.getFullYear();
  const selectedYear = time.getFullYear();

  // 只允许选择当前年的月份
  return selectedYear !== currentYear;
};
// 查询
const searchTopTen = () => {
  areaType.value == "国家"
    ? (searchTwoForm.regionId = "")
    : (searchTwoForm.countryList = []);
  getTwoChartData();
};

const rules = computed(() => {
  return {
    date: [
      { required: true, message: t(`salesBoard.common.date`), trigger: "blur" }
    ],
    regionId: [
      {
        required: true,
        message: t(`salesBoard.common.commonPlaceHolder`),
        trigger: "blur"
      }
    ],
    countryList: [
      {
        required: true,
        message: t(`salesBoard.common.commonPlaceHolder`),
        trigger: "blur"
      }
    ],
    customer: [
      { required: true, message: t(`dingding.titleRuleTip`), trigger: "blur" }
    ]
  };
});

let twoForm = ref(null);

// 获取第二个图表数据
const paintBarData = ref([]);
const getTwoChartData = () => {
  twoForm.value.validate(valid => {
    if (valid) {
      getTwoData(searchTwoForm).then(res => {
        let arr = res.data || [];
        paintBarData.value = res.data;
        nextTick(() => {
          receivableBar(arr);
        });
      });
    }
  });
};
// 经销商销售额
let twentyBarChart = ref(null);
const salesBarTwo = ref(rate[1]);
const receivableBar = arr => {
  let xData = [];
  let yData = [];
  arr.forEach(op => {
    if (salesBarTwo.value == "US$m") {
      yData.push((op.data / 1000000).toFixed(4));
    } else if (salesBarTwo.value == "USD") {
      yData.push(op.data);
    } else if (salesBarTwo.value == "CNY") {
      yData.push((op.data * cnyRate).toFixed(2));
    }
    xData.push(op.distributorName);
  });
  let myChart = echarts.init(document.getElementById("twenty-bar"));
  myChart.clear();
  document.getElementById("twenty-bar").removeAttribute("_echarts_instance_");
  myChart.setOption({
    title: {
      text: t(`salesBoard.saleChartsThree.agencySale`),
      left: "center",
      textStyle: {}
    },
    tooltip: {
      trigger: "axis",
      axisPointer: {
        type: "shadow"
      }
    },
    // legend: {
    //   top: '2%',
    //   icon: 'rect',
    //   left: '2%'
    // },
    grid: {
      left: "4%",
      right: "4%",
      bottom: "0",
      top: "10%",
      containLabel: true
    },
    xAxis: {
      type: "category",
      data: xData,
      axisLabel: {
        rotate: 45,
        formatter: function (value) {
          if (value.length > 10) {
            return value.substring(0, 10) + "...";
          }
          return value;
        }
      }
    },
    yAxis: {
      type: "value",
      name: salesBarTwo.value,
      nameTextStyle: {
        fontWeight: "600"
      },
      axisLabel: {
        fontSize: 14
      }
    },
    toolbox: {
      show: true,
      itemSize: 14,
      feature: {
        myTool1: {
          show: true, //是否显示
          title: "US$m", //鼠标悬空的提示文字
          icon: "path://M337.6384 303.04h85.1072L488.128 482.56c8.3072 23.872 15.5648 49.3184 23.36 74.24h2.56c8.2944-24.9088 15.0656-50.3552 23.36-74.24l63.8208-179.5328h85.1072v384h-70.0288V526.6944c0-36.3264 5.696-89.7792 9.3312-126.0928h-2.0736l-31.1296 90.2784-59.1616 161.3824h-44.1088L429.504 490.88 398.8864 400.64H396.8c3.6352 36.3136 9.856 89.7664 9.856 126.0928v160.3072h-69.0176z",
          onclick: e => {
            salesBarTwo.value = "US$m";
            receivableBar(paintBarData.value);
          }
        },
        myTool2: {
          show: true, //是否显示
          title: "USD", //鼠标悬空的提示文字
          icon: "path://M568.612571 493.275429l-16.603428-5.193143V196.754286l31.670857 11.190857c33.206857 11.702857 59.830857 35.620571 78.848 70.582857 2.998857 4.461714 9.728 6.948571 19.529143 7.314286a19.309714 19.309714 0 0 0 16.749714-10.24c3.803429-10.24 4.534857-18.578286 1.901714-22.893715-32.694857-54.125714-76.288-86.893714-129.609142-97.426285l-19.017143-3.803429v-55.222857a29.696 29.696 0 0 0-5.412572-19.017143C545.426286 76.068571 541.257143 73.142857 528.822857 73.142857c-8.045714 0-13.897143 1.828571-17.846857 5.339429-2.925714 2.925714-4.900571 9.654857-5.266286 17.846857v57.051428l-21.211428 2.340572c-43.300571 4.534857-78.994286 21.357714-106.422857 50.102857-31.817143 31.817143-48.274286 75.044571-48.932572 128.512 0 85.796571 52.150857 142.994286 159.451429 174.957714l17.115428 4.973715v314.294857l-30.427428-8.777143c-38.912-11.264-71.460571-36.278857-96.768-74.24-5.339429-7.753143-13.385143-11.556571-25.088-11.995429-7.899429 0-11.556571 2.340571-14.043429 8.338286-3.437714 12.288-2.852571 22.162286 1.682286 29.988571 34.742857 54.857143 83.382857 87.771429 144.603428 97.718858l20.041143 3.218285v54.857143c0 9.216 1.755429 15.725714 5.266286 19.017143 1.316571 1.243429 5.558857 4.169143 17.846857 4.169143 6.582857 0 12.434286-2.048 17.92-6.217143 3.510857-2.706286 5.266286-8.411429 5.266286-16.969143v-54.710857l19.748571-3.364571c38.4-6.582857 72.557714-23.698286 101.668572-50.761143 35.913143-34.011429 54.491429-77.092571 55.149714-128 0-98.816-52.370286-163.474286-159.963429-197.558857z m-62.902857-15.579429l-33.792-15.652571c-63.049143-29.330286-95.524571-72.265143-96.548571-127.707429 0-39.716571 12.288-72.557714 36.278857-97.426286 15.579429-17.554286 38.034286-28.745143 66.56-33.353143l27.501714-4.388571v278.528z m133.851429 310.198857c-15.506286 13.897143-34.230857 24.868571-55.734857 32.548572l-31.817143 11.410285V525.970286l34.596571 17.334857c62.610286 31.817143 94.793143 81.408 95.670857 147.456 0 38.912-14.336 71.606857-42.642285 97.133714z",
          onclick: e => {
            salesBarTwo.value = "USD";
            receivableBar(paintBarData.value);
          }
        },
        myTool3: {
          show: true, //是否显示
          title: "CNY", //鼠标悬空的提示文字
          icon: "path://M675.861 192l45.611 44.907-166.997 169.6H792v64H544v144.597h248v64H544v176.597h-64V679.104H232v-64h248V470.507H232v-64h237.483l-166.955-169.6L348.138 192 512 358.464 675.861 192z",
          onclick: e => {
            salesBarTwo.value = "CNY";
            receivableBar(paintBarData.value);
          }
        }
      }
    },
    series: [
      {
        data: yData,
        type: "bar",
        label: { show: true, position: "top" }
      }
    ]
  });
};

// 可拖拽卡片提示
setTimeout(() => {
  let tipBox = document.getElementById("dataCard");
  // let tipStyle = tipBox.querySelector('dataTip')
  let initialMouseX = 0;
  let initialMouseY = 0;
  let initialTipX = 0;
  let initialTipY = 0;
  let isTip = false;
  tipBox.addEventListener("mousedown", e => {
    isTip = true;
    initialMouseX = e.clientX;
    initialMouseY = e.clientY;
    initialTipX = tipBox.offsetLeft;
    initialTipY = tipBox.offsetTop;
  });
  document.addEventListener("mouseup", e => {
    isTip = false;
  });
  document.addEventListener("mousemove", e => {
    if (isTip) {
      let deltaX = e.clientX - initialMouseX;
      let deltaY = e.clientY - initialMouseY;
      let newTipX = initialTipX + deltaX;
      let newTipY = initialTipY + deltaY;
      let maxTipX = window.innerWidth - tipBox.offsetWidth;
      let maxTipY = window.innerHeight - tipBox.offsetHeight;
      newTipX = Math.max(0, Math.min(newTipX, maxTipX));
      newTipY = Math.max(0, Math.min(newTipY, maxTipY));
      tipBox.style.left = newTipX + "px";
      tipBox.style.top = newTipY + "px";
    }
  });
}, 500);
const side = computed(() => {
  return window.scrollY;
});
onMounted(() => {
  getAreaData();
  getProductData();
  if (regionList.value.length === 0 && fourAreaList.value.length === 0) {
    searchTwoForm.distributorIdList = fiveAreaList.value;
  }
  if (regionList.value.length === 0 && fourAreaList.value.length > 0) {
    searchTwoForm.regionSelect = "国家";
    searchTwoForm.countryList.push(fourAreaList.value[0]?.resourceId);
  }

  window.scrollTo(0, 0);
  document.body.scrollTop = 0;

  // 监听语言切换，重新渲染图表
  window.addEventListener("setItemEvent", e => {
    getProductData();
    getCurrentDate();
  });
});

onUnmounted(() => {
  // 移除对 sessionStorage 的监听
  window.removeEventListener("setItemEvent", () => {});
});
</script>
<style lang="scss" scoped>
:deep(.el-card) {
  --el-card-border-color: none;

  /* 解决概率进度条宽度 */
  .el-progress--line {
    width: 85%;
  }

  /* 解决概率进度条字体大小 */
  .el-progress-bar__innerText {
    font-size: 15px;
  }

  /* 隐藏 el-scrollbar 滚动条 */
  .el-scrollbar__bar {
    display: none;
  }
  // .dataTip {
  //   border: 1px solid #a7a3a3;
  //   padding: 10px;
  //   position: absolute;
  //   right: 2%;
  //   top: 2%;
  //   cursor: move;
  // }
}

.main-content {
  margin: 20px 20px 0 !important;
  background: none !important;
  padding: 0 !important;
}
.onecharts {
  position: relative;
}
.dataTip {
  border: 1px solid #a7a3a3;
  padding: 10px;
  position: absolute;
  left: 80%;
  top: 1%;
  cursor: pointer;
}
:deep(.item_select) {
  min-width: 200px; /* 设置最小宽度 */
}
</style>
