<template>
  <div>
    <Table
      :showIndex="true"
      :showPage="false"
      :tableData="tableData"
      @refresh="getRoleList"
      :showRefresh="false"
    >
      <template #formItem>
        <el-form-item>
          <el-button type="success" @click="handleAdd">{{
            t("status.add")
          }}</el-button></el-form-item
        >
      </template>
      <template #columns>
        <el-table-column
          :prop="locale === 'zh' ? 'name' : 'roleName'"
          :label="t('permission.role.name')"
        />
        <el-table-column
          prop="roleName"
          :label="t('permission.role.roleName')"
        />
        <el-table-column prop="desc" :label="t('permission.role.desc')" />

        <el-table-column :label="t('status.operate')">
          <template #default="{ row }">
            <el-text type="primary" @click="handlePermission(row)">{{
              t("permission.role.permission")
            }}</el-text>
            <el-text type="primary" @click="handleEdit(row)">{{
              t("status.edit")
            }}</el-text>
            <!-- <el-button type="danger" @click="handleDel(row)">{{
              t("status.del")
            }}</el-button> -->
          </template>
        </el-table-column>
      </template>
    </Table>

    <Dialog
      :dialog="dialog"
      align-center
      @confirm="submitEdit"
      :title="t(`permission.role.editInfo`)"
    >
      <el-form
        ref="ruleForm"
        :model="editFormData"
        :rules="rules"
        :label-position="right"
        label-width="auto"
        style="width: 500px"
      >
        <el-form-item :label="t('permission.role.name')" prop="name">
          <el-input v-model="editFormData.name"
        /></el-form-item>
        <el-form-item :label="t('permission.role.roleName')" prop="roleName">
          <el-input v-model="editFormData.roleName"
        /></el-form-item>
        <el-form-item :label="t('permission.role.desc')" prop="desc">
          <el-input v-model="editFormData.desc"
        /></el-form-item>
        <el-form-item
          v-if="dialog.title == `${t('permission.role.addTitle')}`"
          :label="t('permission.role.permission')"
          prop="resourceIdList"
        >
          <el-tree
            ref="tree"
            class="tree"
            style="width: 400px"
            :data="roleResource"
            show-checkbox
            node-key="resourceId"
            :default-expand-all="true"
            :props="{
              children: 'childrenList',
              label: locale === 'zh' ? 'name' : 'enName'
            }"
            @check="handleCheckChange"
          />
        </el-form-item>
      </el-form>
    </Dialog>
    <!-- 修改权限的抽屉 -->
    <el-drawer
      v-model="drawer.show"
      :title="t(`permission.role.editPermission`)"
      :destroy-on-close="true"
      size="auto"
    >
      <el-form label-width="120px">
        <el-form-item :label="t('permission.role.permission')">
          <el-tree
            ref="treeRef"
            class="tree"
            style="width: 400px"
            :data="roleResource"
            show-checkbox
            node-key="resourceId"
            :default-expand-all="true"
            :default-checked-keys="checkedList"
            :props="{
              children: 'childrenList',
              label: locale === 'zh' ? 'name' : 'enName'
            }"
            @check="handleCheckChange"
          />
        </el-form-item>
      </el-form>
      <template #footer>
        <div style="flex: auto">
          <el-button @click="drawer.show = false">{{
            t(`status.cancle`)
          }}</el-button>
          <el-button type="primary" @click="confirm">{{
            t(`status.confirm`)
          }}</el-button>
        </div>
      </template>
    </el-drawer>
  </div>
</template>

<script setup>
import { onMounted, ref, reactive, computed, nextTick } from "vue";
import Table from "@/components/table/index.vue";
import { useI18n } from "vue-i18n";
import {
  getAllRoleNameList,
  updateRoleInfoById,
  addRoleAndDistributionResource,
  getTreeResourceInfo,
  getResourceInfoByRole,
  updateRoleResource
} from "@/api/permission/role";
import Dialog from "@/components/dialog/index.vue";
import { ElMessage } from "element-plus";
import { debounce } from "lodash";

const { t, locale } = useI18n();

//获取角色列表
const tableData = ref([]);
const getRoleList = () => {
  getAllRoleNameList().then(res => {
    if (res.success) {
      tableData.value = res.data;
    }
  });
};

//修改角色基础信息
const dialog = reactive({
  show: false,
  title: t("permission.role.editInfo"),
  width: "50%"
});
const editFormData = ref({});
const handleEdit = row => {
  dialog.title = t("permission.role.editInfo");
  editFormData.value = JSON.parse(JSON.stringify(row));
  dialog.show = true;
  ruleForm.value.clearValidate();
};
const ruleForm = ref(null);
const rules = computed(() => {
  return {
    name: [
      {
        required: true,
        message: t("permission.role.nameReg"),
        trigger: "blur"
      }
    ],
    roleName: [
      {
        required: true,
        message: t("permission.role.roleNameReg"),
        trigger: "blur"
      }
    ],
    resourceIdList: [
      {
        required: true,
        message: t("permission.role.permissionReg")
      }
    ]
  };
});

//新增
const handleAdd = async () => {
  if (ruleForm.value) {
    ruleForm.value.resetFields();
  }
  await getAllResource();
  dialog.show = true;
  dialog.title = t("permission.role.addTitle");
  editFormData.value = {};
};
//获取全部资源
const roleResource = ref([]);
const getAllResource = () => {
  getTreeResourceInfo().then(res => {
    if (res.success) {
      roleResource.value = res.data.tree;
      // roleResource.value.forEach(item => {
      //   transDisabled(item);
      //   // if (item.level !== 4 && item.childrenList.length === 0) {
      //   //   item.disabled = true;
      //   // }
      // });
    }
  });
};

const transDisabled = item => {
  if (item.level !== 4 && item.childrenList.length === 0) {
    item.disabled = true;
    return;
  } else if (item.level !== 4 && item.childrenList.length > 0) {
    item.childrenList.forEach(val => {
      transDisabled(val);
    });
  }
};

//新增将选择的资源绑定给表单数据,data是完整的当前点击数据，checked是否选中
const handleCheckChange = (data, checked) => {
  editFormData.value.resourceIdList = checked.checkedKeys;
};

//修改权限
const drawer = reactive({
  show: false,
  title: t("permission.role.editPermission")
});
const checkedList = ref([]);
const treeRef = ref(null);
const handlePermission = async row => {
  editFormData.value = row;
  editFormData.value.resourceIdList = [];
  checkedList.value = [];
  await getAllResource();
  await getResourceInfoByRole(row.roleId).then(res => {
    if (res.success) {
      drawer.show = true;
      nextTick(() => {
        let ids = [];
        res.data.forEach(i => {
          ids.push(i.resourceId);
        });
        treeRef.value.setCheckedKeys(ids);
      });
    }
  });
};

//提交
const submitEdit = () => {
  if (ruleForm.value) {
    ruleForm.value.validate(valid => {
      if (valid) {
        if (dialog.title == t("permission.role.editInfo")) {
          updateRoleInfoById(editFormData.value).then(res => {
            if (res.success) {
              ElMessage.success(t("status.pureSuccess"));
              dialog.show = false;
              getRoleList();
            }
          });
        } else if (dialog.title == t("permission.role.addTitle")) {
          addRoleAndDistributionResource(editFormData.value).then(res => {
            if (res.success) {
              ElMessage.success(t("status.pureSuccess"));
              dialog.show = false;
              getRoleList();
            }
          });
        }
      }
    });
  }
};
//修改权限
const confirm = () => {
  updateRoleResource(editFormData.value).then(res => {
    if (res.success) {
      ElMessage.success(t("status.pureSuccess"));
      drawer.show = false;
    }
  });
};

onMounted(() => {
  getRoleList();
});
</script>

<style lang="scss" scoped>
:deep(.el-tree__empty-text) {
  top: 88% !important;
  transform: translate(50%, -50%) !important;
}
</style>
